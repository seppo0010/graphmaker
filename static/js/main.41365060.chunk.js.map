{"version":3,"sources":["ColorPickerView.tsx","graphSlice.ts","NodeView.tsx","NodesView.tsx","EdgeView.tsx","EdgesView.tsx","NoteTakerView.tsx","Editor.tsx","Outline.tsx","App.tsx","store.ts","index.tsx"],"names":["ColorOption","colorDispatchable","color","props","dispatch","useDispatch","Button","style","width","minWidth","height","borderWidth","borderColor","colorable","borderStyle","margin","background","onClick","dispatchable","ColorPickerView","colors","display","marginLeft","map","c","newId","nodes","Math","max","n","id","concat","graphSlice","createSlice","name","initialState","label","shape","edges","from","to","text","reducers","addNode","reducer","state","action","push","payload","prepare","data","nanoid","addEdge","setNodeColor","node","find","setNodeShape","setEdgeColor","edge","deleteNode","filter","e","setGraph","updateText","actions","ShapeOption","star","box","ellipsis","triangle","shapes","ShapePicker","NodeView","index","listRef","useRef","useHotkeys","toString","current","getElementsByTagName","focus","listStyleType","ref","padding","NodesView","graph","useSelector","useState","searchCriteria","setSearchCriteria","newNodeLabel","setNewNodeLabel","addRef","searchRef","el","document","activeElement","v","value","blur","enableOnTags","keyup","Typography","variant","component","gutterBottom","TextField","fullWidth","inputProps","InputProps","endAdornment","InputAdornment","position","IconButton","onBlur","evt","target","onChange","onKeyPress","key","EdgeView","EdgesView","nodesById","Object","fromEntries","newEdgeFrom","setNewEdgeFrom","newEdgeTo","setNewEdgeTo","useEffect","Autocomplete","options","getOptionLabel","option","_","blurOnSelect","renderInput","params","NoteTakerView","markdown","multiline","minHeight","inputRef","Editor","tab","overflow","hidden","Outline","version","setVersion","currentGraph","setCurrentGraph","previousGraph","setPreviousGraph","network","setNetwork","j","JSON","stringify","parse","parseInt","console","log","nodeIds","removedNodes","indexOf","body","remove","update","edgeIds","removedEdges","stabilize","visJsRef","Network","physics","enabled","arrows","top","right","zIndex","element","createElement","setAttribute","appendChild","click","removeChild","onchange","fileToLoad","files","getAttribute","attrs","a","eq","fileReader","FileReader","onload","fileLoadedEvent","textFromFileLoaded","result","st","dotparse","children","s","type","i","node_id","attr_list","nodesByLabel","edge_list","readAsText","join","encodeURIComponent","dt","href","toDataURL","replace","App","setTab","AppBar","Tabs","newTab","Tab","className","flex","store","configureStore","combineReducers","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41365060.chunk.js","sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\n\nimport type { Color } from './graphSlice'\n\nexport interface Colorable {\n  color: Color\n}\nexport interface ColorDispatchable {\n  colorable: Colorable\n  dispatchable: (color: Color) => void\n}\n\nfunction ColorOption({colorDispatchable, color, ...props}: {color: Color, colorDispatchable: ColorDispatchable}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    borderWidth: 4,\n    borderColor: colorDispatchable.colorable.color === color ? 'red' : 'black',\n    borderStyle: 'solid',\n    margin: 8,\n    background: color,\n    ...props\n  }} onClick={() => {\n    dispatch(colorDispatchable.dispatchable(color))\n  }}></Button>\n}\n\nfunction ColorPickerView({\n    colorDispatchable,\n    colors,\n}: {\n    colorDispatchable: ColorDispatchable,\n    colors: Color[]\n}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {colors.map((c) => (\n        <ColorOption key={c} colorDispatchable={colorDispatchable} color={c} />\n      ))}\n    </div>\n  )\n}\n\nexport default ColorPickerView\n","import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from 'nanoid'\n\nexport type Color = 'white' | 'red' | 'blue' | 'yellow' | 'black'\nexport type Shape = 'star' | 'box' | 'ellipsis' | 'triangle'\n\ninterface WithId {\n  id: number\n}\n\nexport interface Node extends WithId {\n  label: string\n  color: Color\n  shape: Shape\n}\n\nexport interface Edge extends WithId {\n  from: number\n  to: number\n  color: Color\n}\n\ninterface GraphState {\n  nodes: Node[]\n  edges: Edge[]\n  text: string\n}\n\nconst newId = (nodes: WithId[]) => {\n  return Math.max(...nodes.map((n) => n.id).concat([0]) || 0) + 1\n}\n\nconst initialState: GraphState = {\n  nodes: [\n    { id: 1, label: 'Node 1', color: 'red', shape: 'box' },\n    { id: 2, label: 'Node 2', color: 'white', shape: 'box' },\n    { id: 3, label: 'Node 3', color: 'white', shape: 'box' },\n    { id: 4, label: 'Node 4', color: 'white', shape: 'box' },\n    { id: 5, label: 'Node 5', color: 'white', shape: 'box' },\n  ],\n  edges: [\n    { id: 1, from: 1, to: 2, color: 'black' },\n    { id: 2, from: 1, to: 3, color: 'black' },\n    { id: 3, from: 2, to: 4, color: 'black' },\n    { id: 4, from: 2, to: 5, color: 'black' }\n  ],\n  text: '# Hello world\\n',\n}\n\nconst graphSlice = createSlice({\n  name: 'graph',\n  initialState,\n  reducers: {\n    addNode: {\n      reducer(state, action) {\n        state.nodes.push({\n          id: newId(state.nodes),\n          label: action.payload.label,\n          shape: 'box',\n          color: 'white',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    addEdge: {\n      reducer(state, action) {\n        state.edges.push({\n          id: newId(state.edges),\n          from: action.payload.from.id,\n          to: action.payload.to.id,\n          color: 'black',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeColor: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeShape: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.shape = action.payload.shape\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setEdgeColor: {\n      reducer(state, action) {\n        const edge = state.edges.find((n) => n.id === action.payload.edge.id)\n        if (!edge) {\n          return\n        }\n        edge.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    deleteNode: {\n      reducer(state, action) {\n        state.nodes = state.nodes.filter((n) => n.id !== action.payload.id)\n        state.edges = state.edges.filter((e) => e.from !== action.payload.id && e.to !== action.payload.id)\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setGraph: {\n      reducer(state, action) {\n        state.nodes = action.payload.nodes\n        state.edges = action.payload.edges\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    updateText: {\n      reducer(state, action) {\n        state.text = action.payload\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n  },\n})\n\nexport const {\n  addNode,\n  addEdge,\n  setNodeColor,\n  setNodeShape,\n  setEdgeColor,\n  deleteNode,\n  setGraph,\n  updateText,\n} = graphSlice.actions\n\nexport default graphSlice.reducer\n","import React, { useRef } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport StarIcon from '@material-ui/icons/StarBorder';\nimport BoxIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CircleIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport TriangleIcon from '@material-ui/icons/ChangeHistory';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport ColorPickerView from './ColorPickerView'\nimport { Color, setNodeColor, setNodeShape, deleteNode } from './graphSlice'\nimport type { Node, Shape } from './graphSlice'\n\nfunction ShapeOption({node, shape, ...props}: {node: Node, shape: Shape}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    margin: 8,\n    color: shape === node.shape ? 'blue' : 'black',\n    ...props\n  }} onClick={() => {\n    dispatch(setNodeShape({ node, shape }))\n  }}>{{\n    star: <StarIcon />,\n    box: <BoxIcon />,\n    ellipsis: <CircleIcon />,\n    triangle: <TriangleIcon />,\n  }[shape]}</Button>\n}\n\nconst shapes: Shape[] = ['star', 'box', 'ellipsis', 'triangle']\nfunction ShapePicker({node}: {node: Node}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {shapes.map((c) => (\n        <ShapeOption key={c} node={node} shape={c} />\n      ))}\n    </div>\n  )\n}\n\nfunction NodeView({node, index}: {node: Node, index: number}) {\n  const dispatch = useDispatch()\n  const del = () => dispatch(deleteNode(node))\n  const listRef = useRef<HTMLLIElement>(null)\n  useHotkeys((1+index).toString(), () => {\n    listRef?.current?.getElementsByTagName('button')[0].focus()\n  })\n  return (\n    <li style={{listStyleType: 'none', margin: 0}} ref={listRef}> {node.label}\n      <div style={{display: 'flex'}}>\n        <div>\n          <ColorPickerView\n            colorDispatchable={{\n              colorable: node,\n              dispatchable: (color: Color) => setNodeColor({node, color}),\n            }}\n            colors={['white', 'red', 'blue', 'yellow']}\n            />\n          <ShapePicker node={node} />\n        </div>\n        <div>\n          <Button style={{padding: 22, minWidth: 0, width: 24, height: 24}} onClick={del}>\n            <DeleteIcon />\n          </Button>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default NodeView\n","import React, { useState, useRef } from 'react'\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport NodeView from './NodeView'\nimport { addNode, Node } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction NodesView() {\n  const dispatch = useDispatch()\n  const graph = useSelector((state: RootState) => state.graph)\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newNodeLabel, setNewNodeLabel] = useState('')\n  const newNode = (evt: React.FocusEvent<HTMLInputElement>) => {\n    const label = evt.target.value;\n    if (label) {\n      dispatch(addNode({ label, color: 'white' }))\n      setNewNodeLabel('')\n    }\n  }\n  const addRef = useRef<HTMLInputElement>(null)\n  const searchRef = useRef<HTMLInputElement>(null)\n  useHotkeys('esc', () => {\n    const el = (document.activeElement as any)\n    if (!el) return;\n    const v = el.value\n    el.value = ''\n    el.blur()\n    el.value = v\n  }, {enableOnTags: ['INPUT']})\n  useHotkeys('a', () => addRef?.current?.focus(), {keyup: true})\n  useHotkeys('s', () => searchRef?.current?.focus(), {keyup: true})\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Nodos\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar', 'ref': searchRef }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"Agregar nodo...\"\n        onBlur={newNode}\n        value={newNodeLabel}\n        inputProps={{ 'ref': addRef }}\n        onChange={(evt) => setNewNodeLabel(evt.target.value)}\n        onKeyPress={(evt) => evt.key === 'Enter' && (evt.target as HTMLInputElement).blur()}\n        />\n      <ul style={{padding: 0}}>\n        {graph.nodes.map((node: Node, index: number) => (\n          <NodeView\n            key={node.id}\n            index={index}\n            node={node}\n            />\n        ))}\n      </ul>\n    </div>\n  )\n}\nexport default NodesView\n","import React from 'react'\n\nimport { Node, Edge, Color, setEdgeColor } from './graphSlice'\nimport ColorPickerView from './ColorPickerView'\n\nfunction EdgeView({edge, from, to}: {edge: Edge, from: Node, to: Node}) {\n  return (\n    <li style={{listStyleType: 'none', margin: 0}}>\n      {from.label} - {to.label}\n      <ColorPickerView\n        colorDispatchable={{\n          colorable: edge,\n          dispatchable: (color: Color) => setEdgeColor({edge, color}),\n        }}\n        colors={['black', 'red', 'blue', 'yellow']}\n        />\n    </li>\n  )\n}\n\nexport default EdgeView\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport EdgeView from './EdgeView'\nimport { Node, Edge, addEdge } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction EdgesView() {\n  const dispatch = useDispatch()\n  const edges = useSelector((state: RootState) => state.graph.edges)\n  const nodes = useSelector((state: RootState) => state.graph.nodes)\n  const nodesById = Object.fromEntries(nodes.map((node: Node) => [node.id, node]))\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newEdgeFrom, setNewEdgeFrom] = useState<Node | null>(null)\n  const [newEdgeTo, setNewEdgeTo] = useState<Node | null>(null)\n  useEffect(() => {\n    if (!newEdgeFrom || !newEdgeTo) return\n    dispatch(addEdge({'from': newEdgeFrom, to: newEdgeTo}))\n    setNewEdgeFrom(null)\n    setNewEdgeTo(null)\n  }, [setNewEdgeFrom, setNewEdgeTo, newEdgeFrom, newEdgeTo, dispatch])\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Conectores\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar' }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        onChange={(_, value) => setNewEdgeFrom(value)}\n        value={newEdgeFrom}\n        blurOnSelect\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector desde...\"\n            />\n          )}\n        />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        blurOnSelect\n        onChange={(_, value) => setNewEdgeTo(value)}\n        value={newEdgeTo}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector hacia...\"\n            />\n          )}\n        />\n      <ul style={{padding: 0}}>\n        {edges.map((edge: Edge) => (\n          <EdgeView key={edge.id} edge={edge} from={nodesById[edge.from]} to={nodesById[edge.to]} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default EdgesView\n","import React, { useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@material-ui/core/TextField';\n\nimport { updateText } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction NoteTakerView() {\n  const markdown = useSelector((state: RootState) => state.graph.text)\n  const dispatch = useDispatch()\n  const ref = useRef<HTMLTextAreaElement>()\n  useEffect(() => {\n    ref?.current?.focus()\n  })\n  return (\n    <div>\n      <TextField\n        multiline\n        fullWidth\n        inputProps={{style: {minHeight: 400}}}\n        inputRef={ref}\n        value={markdown}\n        onChange={(e) => dispatch(updateText(e.target.value))}\n        />\n    </div>\n  )\n}\n\nexport default NoteTakerView\n","import React from 'react'\nimport NodesView from './NodesView';\nimport EdgesView from './EdgesView';\nimport NoteTakerView from './NoteTakerView'\n\nfunction Editor({tab}: {tab: number}) {\n  return (\n    <div style={{height: '100vh', overflow: 'auto'}}>\n      <div style={{padding: 20}}>\n        <div hidden={tab !== 0}>\n          <NodesView />\n        </div>\n        <div hidden={tab !== 1}>\n          <EdgesView />\n        </div>\n        <div hidden={tab !== 2}>\n          <NoteTakerView />\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Editor\n","import React, { useState, useEffect, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Network } from 'vis-network'\nimport Button from '@material-ui/core/Button';\nimport dotparse, { NodeStatement, EdgeStatement } from 'dotparser'\n\nimport { Node, Edge, setGraph } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction Outline({tab}: {tab: number}) {\n  const graph = useSelector((state: RootState) => state.graph)\n  const [version, setVersion] = useState('0')\n  const [currentGraph, setCurrentGraph] = useState<null | typeof graph>(null)\n  const [previousGraph, setPreviousGraph] = useState('')\n  const [network, setNetwork] = useState<Network | null>(null)\n  const dispatch = useDispatch()\n  const markdown = useSelector((state: RootState) => state.graph.text)\n  useEffect(() => {\n    const j = JSON.stringify(graph)\n    if (j !== previousGraph) {\n      setPreviousGraph(j)\n      setCurrentGraph(JSON.parse(j))\n      setVersion((parseInt(version) + 1).toString())\n    }\n    console.log(graph)\n    if (network) {\n      const n = network as any\n      const nodes = graph.nodes\n      const nodeIds = graph.nodes.map((n) => n.id)\n      const removedNodes = JSON.parse(previousGraph).nodes.filter((n: Node) => nodeIds.indexOf(n.id) === -1)\n      n.body.data.nodes.remove(removedNodes)\n      n.body.data.nodes.update(nodes);\n\n      const edgeIds = graph.edges.map((n) => n.id)\n      const removedEdges = JSON.parse(previousGraph).edges.filter((n: Node) => edgeIds.indexOf(n.id) === -1)\n      n.body.data.edges.remove(removedEdges)\n      n.body.data.edges.update(graph.edges);\n      n.stabilize(1000)\n    }\n  }, [setPreviousGraph, graph, previousGraph, version, network])\n\n  const visJsRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!network) {\n      setNetwork(visJsRef.current && currentGraph &&\n        new Network(visJsRef.current, currentGraph, {\n          physics: {enabled: false},\n          edges: {\n            arrows: {\n              to: {\n                enabled: true,\n              }\n            }\n          },\n        }))\n    }\n  }, [visJsRef, currentGraph, network]);\n\n  const uploadDOT = () => {\n    const element = document.createElement('input');\n    element.setAttribute('type', 'file');\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n\n    element.onchange = () => {\n      const fileToLoad = element.files![0];\n\n      const getAttribute = (name: string, attrs: {id: string, eq: string}[]) => {\n        return attrs.find((a) => a.id === name)?.eq\n      }\n      const fileReader = new FileReader();\n      fileReader.onload = function(fileLoadedEvent){\n        const textFromFileLoaded = fileLoadedEvent.target!.result;\n        const st = dotparse(textFromFileLoaded as string)\n          console.log(st)\n        const nodes = st[0].children\n            .filter((s) => s.type === 'node_stmt')\n            .map((n: NodeStatement | EdgeStatement, i) => n as NodeStatement)\n            .map((n: NodeStatement, i) => ({\n          id: i + 1,\n          label: n.node_id.id,\n          color: getAttribute('color', n.attr_list),\n          shape: getAttribute('shape', n.attr_list),\n        }))\n        const nodesByLabel = Object.fromEntries(nodes.map((n) => [n.label, n]))\n        const edges = st[0].children\n            .filter((s) => s.type === 'edge_stmt')\n            .map((n: NodeStatement | EdgeStatement, i) => n as EdgeStatement)\n            .map((n: EdgeStatement, i) => ({\n          id: i + 1,\n          from: nodesByLabel[n.edge_list[0].id].id,\n          to: nodesByLabel[n.edge_list[1].id].id,\n          color: getAttribute('color', n.attr_list),\n        }))\n        const graph = {\n          nodes,\n          edges,\n        }\n        dispatch(setGraph(graph))\n      };\n\n      fileReader.readAsText(fileToLoad, \"UTF-8\");\n    }\n  }\n\n  const downloadAsDOT = () => {\n    const nodes = Object.fromEntries(graph.nodes.map((node: Node) => [node.id, node]))\n    let text = 'digraph {\\n'\n    text += graph.nodes.map((n: Node) => `  \"${n.label}\"[shape=${n.shape}][color=${n.color}]`).join('\\n') + '\\n'\n    text += graph.edges.map((e: Edge) => `  \"${nodes[e.from].label}\"->\"${nodes[e.to].label}\"[color=${e.color}]`).join('\\n') + '\\n'\n    text += '}'\n    const filename = 'graph.dot'\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  const downloadAsPNG = () => {\n    const dt = visJsRef?.current?.getElementsByTagName('canvas')[0]\n    if (!dt) return\n    const href = dt.toDataURL().replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\n    const filename = 'graph.png'\n    const element = document.createElement('a');\n    element.setAttribute('href', href)\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  return <>\n    <div style={{position: 'absolute', top: 0, right: 0, background: 'white', zIndex: 1}}>\n      <Button onClick={uploadDOT}>Upload DOT</Button>\n      <Button onClick={downloadAsDOT}>Download as DOT</Button>\n      <Button onClick={downloadAsPNG}>Download as PNG</Button>\n    </div>\n    <div ref={visJsRef} style={{width: '100%', height: '100vh', display: (tab === 1 || tab === 0) ? 'block' : 'none'}} />\n    <div style={{width: '100%', height: '100vh', display: tab === 2 ? 'block' : 'none'}}>\n      <ReactMarkdown children={markdown} />\n    </div>\n  </>\n}\n\nexport default Outline\n","import React, { useState } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport Editor from './Editor'\nimport Outline from './Outline'\n\nfunction App() {\n  const [tab, setTab] = useState(0)\n  useHotkeys('ctrl+1', () => setTab(0))\n  useHotkeys('ctrl+2', () => setTab(1))\n  useHotkeys('ctrl+3', () => setTab(2))\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Tabs value={tab} onChange={(e: any, newTab: number) => setTab(newTab)}>\n          <Tab label=\"Nodos\" />\n          <Tab label=\"Conectores\" />\n          <Tab label=\"Texto libre\" />\n        </Tabs>\n      </AppBar>\n      <div className=\"App\" style={{\n        display: 'flex',\n      }}>\n        <div style={{flex: 1}}>\n          <Editor tab={tab} />\n        </div>\n        <div style={{flex: 1}}>\n          <Outline tab={tab} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from \"redux\";\nimport graph from './graphSlice'\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    graph,\n  }),\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport { store } from './store'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}