{"version":3,"sources":["ColorPickerView.tsx","graphSlice.ts","navigationSlice.ts","NodeView.tsx","NodesView.tsx","EdgeView.tsx","EdgesView.tsx","NoteTakerView.tsx","Editor.tsx","Outline.tsx","driveSlice.ts","LoadFromDrive.tsx","AppDrawer.tsx","App.tsx","store.ts","index.tsx"],"names":["ColorOption","colorDispatchable","color","props","dispatch","useDispatch","Button","style","width","minWidth","height","borderWidth","borderColor","colorable","borderStyle","margin","background","onClick","dispatchable","ColorPickerView","colors","display","marginLeft","map","c","newId","nodes","Math","max","n","id","concat","graphSlice","createSlice","name","initialState","driveId","label","shape","edges","from","to","text","reducers","addNode","reducer","state","action","push","payload","prepare","data","nanoid","addEdge","setNodeColor","node","find","setNodeShape","setEdgeColor","edge","deleteNode","filter","e","setGraph","updateText","setName","setDriveId","actions","navigationSlice","tab","drawerIsOpen","setTab","setDrawerIsOpen","ShapeOption","star","box","ellipsis","triangle","shapes","ShapePicker","NodeView","index","listRef","useRef","isActive","document","activeElement","current","contains","useHotkeys","toString","getElementsByTagName","focus","listStyleType","ref","flexDirection","padding","NodesView","graph","useSelector","useState","searchCriteria","setSearchCriteria","newNodeLabel","setNewNodeLabel","addRef","searchRef","el","v","value","blur","enableOnTags","keyup","indexOf","Typography","variant","component","gutterBottom","TextField","fullWidth","onChange","target","inputProps","InputProps","endAdornment","InputAdornment","position","IconButton","onBlur","evt","onKeyPress","key","EdgeView","EdgesView","nodesById","Object","fromEntries","newEdgeFrom","setNewEdgeFrom","newEdgeTo","setNewEdgeTo","useEffect","Autocomplete","options","getOptionLabel","option","_","blurOnSelect","renderInput","params","NoteTakerView","markdown","multiline","minHeight","inputRef","Editor","overflow","hidden","Outline","version","setVersion","currentGraph","setCurrentGraph","previousGraph","setPreviousGraph","network","setNetwork","j","JSON","stringify","parse","parseInt","nodeIds","removedNodes","body","remove","update","edgeIds","removedEdges","stabilize","visJsRef","Network","physics","enabled","arrows","children","driveSlice","isSignedIn","setSignedIn","login","a","Promise","resolve","reject","gapi","load","client","init","status","auth2","getAuthInstance","get","listen","signIn","LoadFromDrive","close","loading","setLoading","files","setFiles","handleListItemClick","drive","fileId","alt","f","list","spaces","pageSize","fields","orderBy","response","Dialog","onClose","aria-labelledby","open","DialogTitle","textAlign","CircularProgress","List","file","ListItem","button","ListItemText","primary","AppDrawer","navigation","loadFromDriveOpen","setLoadFromDriveOpen","saveToDrive","prompt","create","parents","uploadType","mimeType","result","g","fetch","method","headers","Headers","getToken","access_token","Drawer","Divider","paddingRight","ListItemIcon","element","createElement","setAttribute","appendChild","click","removeChild","onchange","fileToLoad","getAttribute","attrs","eq","fileReader","FileReader","onload","fileLoadedEvent","textFromFileLoaded","st","dotparse","s","type","i","node_id","attr_list","nodesByLabel","edge_list","readAsText","join","encodeURIComponent","App","AppBar","Toolbar","aria-label","Tabs","newTab","Tab","className","flex","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","combineReducers","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5de2a2a6.chunk.js","sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\n\nimport type { Color } from './graphSlice'\n\nexport interface Colorable {\n  color: Color\n}\nexport interface ColorDispatchable {\n  colorable: Colorable\n  dispatchable: (color: Color) => void\n}\n\nfunction ColorOption({colorDispatchable, color, ...props}: {color: Color, colorDispatchable: ColorDispatchable}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    borderWidth: 4,\n    borderColor: colorDispatchable.colorable.color === color ? 'red' : 'black',\n    borderStyle: 'solid',\n    margin: 8,\n    background: color,\n    ...props\n  }} onClick={() => {\n    dispatch(colorDispatchable.dispatchable(color))\n  }}></Button>\n}\n\nfunction ColorPickerView({\n    colorDispatchable,\n    colors,\n}: {\n    colorDispatchable: ColorDispatchable,\n    colors: Color[]\n}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {colors.map((c) => (\n        <ColorOption key={c} colorDispatchable={colorDispatchable} color={c} />\n      ))}\n    </div>\n  )\n}\n\nexport default ColorPickerView\n","import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from 'nanoid'\n\nexport type Color = 'white' | 'red' | 'blue' | 'yellow' | 'black'\nexport type Shape = 'star' | 'box' | 'ellipsis' | 'triangle'\n\ninterface WithId {\n  id: number\n}\n\nexport interface Node extends WithId {\n  label: string\n  color: Color\n  shape: Shape\n}\n\nexport interface Edge extends WithId {\n  from: number\n  to: number\n  color: Color\n}\n\ninterface GraphState {\n  driveId: string | null\n  name: string\n  nodes: Node[]\n  edges: Edge[]\n  text: string\n}\n\nconst newId = (nodes: WithId[]) => {\n  return Math.max(...nodes.map((n) => n.id).concat([0]) || 0) + 1\n}\n\nconst initialState: GraphState = {\n  driveId: null,\n  name: '',\n  nodes: [\n    { id: 1, label: 'Node 1', color: 'red', shape: 'box' },\n    { id: 2, label: 'Node 2', color: 'white', shape: 'box' },\n    { id: 3, label: 'Node 3', color: 'white', shape: 'box' },\n    { id: 4, label: 'Node 4', color: 'white', shape: 'box' },\n    { id: 5, label: 'Node 5', color: 'white', shape: 'box' },\n  ],\n  edges: [\n    { id: 1, from: 1, to: 2, color: 'black' },\n    { id: 2, from: 1, to: 3, color: 'black' },\n    { id: 3, from: 2, to: 4, color: 'black' },\n    { id: 4, from: 2, to: 5, color: 'black' }\n  ],\n  text: '# Hello world\\n',\n}\n\nconst graphSlice = createSlice({\n  name: 'graph',\n  initialState,\n  reducers: {\n    addNode: {\n      reducer(state, action) {\n        state.nodes.push({\n          id: newId(state.nodes),\n          label: action.payload.label,\n          shape: 'box',\n          color: 'white',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    addEdge: {\n      reducer(state, action) {\n        state.edges.push({\n          id: newId(state.edges),\n          from: action.payload.from.id,\n          to: action.payload.to.id,\n          color: 'black',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeColor: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeShape: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.shape = action.payload.shape\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setEdgeColor: {\n      reducer(state, action) {\n        const edge = state.edges.find((n) => n.id === action.payload.edge.id)\n        if (!edge) {\n          return\n        }\n        edge.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    deleteNode: {\n      reducer(state, action) {\n        state.nodes = state.nodes.filter((n) => n.id !== action.payload.id)\n        state.edges = state.edges.filter((e) => e.from !== action.payload.id && e.to !== action.payload.id)\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setGraph: {\n      reducer(state, action) {\n        state.nodes = action.payload.nodes\n        state.edges = action.payload.edges\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    updateText: {\n      reducer(state, action) {\n        state.text = action.payload\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setName: {\n      reducer(state, action) {\n        state.name = action.payload\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setDriveId: {\n      reducer(state, action) {\n        state.driveId = action.payload\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n  },\n})\n\nexport const {\n  addNode,\n  addEdge,\n  setNodeColor,\n  setNodeShape,\n  setEdgeColor,\n  deleteNode,\n  setGraph,\n  updateText,\n  setName,\n  setDriveId,\n} = graphSlice.actions\n\nexport default graphSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from 'nanoid'\n\nexport type Tab = 0 | 1 | 2\n\ninterface NavigationState {\n  tab: Tab\n  drawerIsOpen: boolean\n}\n\nconst initialState: NavigationState = {\n  tab: 0,\n  drawerIsOpen: false,\n}\n\nconst navigationSlice = createSlice({\n  name: 'navigation',\n  initialState,\n  reducers: {\n    setTab: {\n      reducer(state, action) {\n        state.tab = action.payload\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setDrawerIsOpen: {\n      reducer(state, action) {\n        state.drawerIsOpen = action.payload\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n  },\n})\n\nexport const {\n  setTab,\n  setDrawerIsOpen,\n} = navigationSlice.actions\n\nexport default navigationSlice.reducer\n","import React, { useRef } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport StarIcon from '@material-ui/icons/StarBorder';\nimport BoxIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CircleIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport TriangleIcon from '@material-ui/icons/ChangeHistory';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport ColorPickerView from './ColorPickerView'\nimport { Color, setNodeColor, setNodeShape, deleteNode } from './graphSlice'\nimport { setTab } from './navigationSlice'\nimport type { Node, Shape } from './graphSlice'\n\nfunction ShapeOption({node, shape, ...props}: {node: Node, shape: Shape}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    margin: 8,\n    color: shape === node.shape ? 'blue' : 'black',\n    ...props\n  }} onClick={() => {\n    dispatch(setNodeShape({ node, shape }))\n  }}>{{\n    star: <StarIcon />,\n    box: <BoxIcon />,\n    ellipsis: <CircleIcon />,\n    triangle: <TriangleIcon />,\n  }[shape]}</Button>\n}\n\nconst shapes: Shape[] = ['star', 'box', 'ellipsis', 'triangle']\nfunction ShapePicker({node}: {node: Node}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {shapes.map((c) => (\n        <ShapeOption key={c} node={node} shape={c} />\n      ))}\n    </div>\n  )\n}\n\nfunction NodeView({node, index}: {node: Node, index: number}) {\n  const dispatch = useDispatch()\n  const del = () => dispatch(deleteNode(node))\n  const connect = () => dispatch(setTab(1))\n  const listRef = useRef<HTMLLIElement>(null)\n  const isActive = () => {\n    if (document.activeElement && listRef?.current) {\n      return listRef.current.contains(document.activeElement)\n    }\n    return false\n  }\n  useHotkeys('w', () => { isActive() && dispatch(setNodeColor({node, color: 'white'}))})\n  useHotkeys('y', () => { isActive() && dispatch(setNodeColor({node, color: 'yellow'}))})\n  useHotkeys('b', () => { isActive() && dispatch(setNodeColor({node, color: 'blue'}))})\n  useHotkeys('r', () => { isActive() && dispatch(setNodeColor({node, color: 'red'}))})\n  useHotkeys('*', () => { isActive() && dispatch(setNodeShape({node, shape: 'star'}))})\n  useHotkeys('q', () => { isActive() && dispatch(setNodeShape({node, shape: 'box'}))})\n  useHotkeys('c', () => { isActive() && dispatch(setNodeShape({node, shape: 'ellipsis'}))})\n  useHotkeys('t', () => { isActive() && dispatch(setNodeShape({node, shape: 'triangle'}))})\n  useHotkeys((1+index).toString(), () => {\n    listRef?.current?.getElementsByTagName('button')[0].focus()\n  })\n  return (\n    <li style={{listStyleType: 'none', margin: 0}} ref={listRef}> {node.label}\n      <div style={{display: 'flex'}}>\n        <div>\n          <ColorPickerView\n            colorDispatchable={{\n              colorable: node,\n              dispatchable: (color: Color) => setNodeColor({node, color}),\n            }}\n            colors={['white', 'red', 'blue', 'yellow']}\n            />\n          <ShapePicker node={node} />\n        </div>\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n          <Button style={{padding: 22, minWidth: 0, width: 24, height: 24}} onClick={del}>\n            <DeleteIcon />\n          </Button>\n          <Button style={{padding: 22, minWidth: 0, width: 24, height: 24}} onClick={connect}>\n            <ShareIcon />\n          </Button>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default NodeView\n","import React, { useState, useRef } from 'react'\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport NodeView from './NodeView'\nimport { addNode, Node } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction NodesView() {\n  const dispatch = useDispatch()\n  const graph = useSelector((state: RootState) => state.graph)\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newNodeLabel, setNewNodeLabel] = useState('')\n  const newNode = (evt: React.FocusEvent<HTMLInputElement>) => {\n    const label = evt.target.value;\n    if (label) {\n      dispatch(addNode({ label, color: 'white' }))\n      setNewNodeLabel('')\n    }\n  }\n  const addRef = useRef<HTMLInputElement>(null)\n  const searchRef = useRef<HTMLInputElement>(null)\n  useHotkeys('esc', () => {\n    const el = (document.activeElement as any)\n    if (!el) return;\n    const v = el.value\n    el.value = ''\n    el.blur()\n    el.value = v\n  }, {enableOnTags: ['INPUT']})\n  useHotkeys('a', () => addRef?.current?.focus(), {keyup: true})\n  useHotkeys('s', () => searchRef?.current?.focus(), {keyup: true})\n  const nodes = searchCriteria === '' ? graph.nodes : graph.nodes.filter((n: Node) => n.label.indexOf(searchCriteria) > -1)\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Nodos\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        value={searchCriteria}\n        onChange={(e) => setSearchCriteria(e.target.value)}\n        inputProps={{ 'aria-label': 'Buscar', 'ref': searchRef }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"Agregar nodo...\"\n        onBlur={newNode}\n        value={newNodeLabel}\n        inputProps={{ 'ref': addRef }}\n        onChange={(evt) => setNewNodeLabel(evt.target.value)}\n        onKeyPress={(evt) => evt.key === 'Enter' && (evt.target as HTMLInputElement).blur()}\n        />\n      <ul style={{padding: 0}}>\n        {nodes.map((node: Node, index: number) => (\n          <NodeView\n            key={node.id}\n            index={index}\n            node={node}\n            />\n        ))}\n      </ul>\n    </div>\n  )\n}\nexport default NodesView\n","import React from 'react'\n\nimport { Node, Edge, Color, setEdgeColor } from './graphSlice'\nimport ColorPickerView from './ColorPickerView'\n\nfunction EdgeView({edge, from, to}: {edge: Edge, from: Node, to: Node}) {\n  return (\n    <li style={{listStyleType: 'none', margin: 0}}>\n      {from.label} - {to.label}\n      <ColorPickerView\n        colorDispatchable={{\n          colorable: edge,\n          dispatchable: (color: Color) => setEdgeColor({edge, color}),\n        }}\n        colors={['black', 'red', 'blue', 'yellow']}\n        />\n    </li>\n  )\n}\n\nexport default EdgeView\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport EdgeView from './EdgeView'\nimport { Node, Edge, addEdge } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction EdgesView() {\n  const dispatch = useDispatch()\n  const edges = useSelector((state: RootState) => state.graph.edges)\n  const nodes = useSelector((state: RootState) => state.graph.nodes)\n  const nodesById = Object.fromEntries(nodes.map((node: Node) => [node.id, node]))\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newEdgeFrom, setNewEdgeFrom] = useState<Node | null>(null)\n  const [newEdgeTo, setNewEdgeTo] = useState<Node | null>(null)\n  useEffect(() => {\n    if (!newEdgeFrom || !newEdgeTo) return\n    dispatch(addEdge({'from': newEdgeFrom, to: newEdgeTo}))\n    setNewEdgeFrom(null)\n    setNewEdgeTo(null)\n  }, [setNewEdgeFrom, setNewEdgeTo, newEdgeFrom, newEdgeTo, dispatch])\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Conectores\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar' }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        onChange={(_, value) => setNewEdgeFrom(value)}\n        value={newEdgeFrom}\n        blurOnSelect\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector desde...\"\n            />\n          )}\n        />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        blurOnSelect\n        onChange={(_, value) => setNewEdgeTo(value)}\n        value={newEdgeTo}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector hacia...\"\n            />\n          )}\n        />\n      <ul style={{padding: 0}}>\n        {edges.map((edge: Edge) => (\n          <EdgeView key={edge.id} edge={edge} from={nodesById[edge.from]} to={nodesById[edge.to]} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default EdgesView\n","import React, { useEffect, useRef } from 'react'\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@material-ui/core/TextField';\n\nimport { updateText } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction NoteTakerView() {\n  const markdown = useSelector((state: RootState) => state.graph.text)\n  const dispatch = useDispatch()\n  const ref = useRef<HTMLTextAreaElement>()\n  useEffect(() => {\n    ref?.current?.focus()\n  })\n  useHotkeys('e', () => ref?.current?.focus(), {keyup: true})\n  useHotkeys('esc', () => {\n    const el = (document.activeElement as any)\n    if (!el) return;\n    el.blur()\n  }, {enableOnTags: ['TEXTAREA']})\n  return (\n    <div>\n      <TextField\n        multiline\n        fullWidth\n        inputProps={{style: {minHeight: 400}}}\n        inputRef={ref}\n        value={markdown}\n        onChange={(e) => dispatch(updateText(e.target.value))}\n        />\n    </div>\n  )\n}\n\nexport default NoteTakerView\n","import React from 'react'\nimport NodesView from './NodesView';\nimport EdgesView from './EdgesView';\nimport NoteTakerView from './NoteTakerView'\n\nfunction Editor({tab}: {tab: number}) {\n  return (\n    <div style={{height: '100vh', overflow: 'auto'}}>\n      <div style={{padding: 20}}>\n        <div hidden={tab !== 0}>\n          <NodesView />\n        </div>\n        <div hidden={tab !== 1}>\n          <EdgesView />\n        </div>\n        <div hidden={tab !== 2}>\n          <NoteTakerView />\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Editor\n","import React, { useState, useEffect, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { useSelector } from 'react-redux'\nimport { Network } from 'vis-network'\n\nimport { Node, Edge } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction Outline({tab}: {tab: number}) {\n  const graph = useSelector((state: RootState) => state.graph)\n  const [version, setVersion] = useState('0')\n  const [currentGraph, setCurrentGraph] = useState<null | typeof graph>(null)\n  const [previousGraph, setPreviousGraph] = useState('')\n  const [network, setNetwork] = useState<Network | null>(null)\n  const markdown = useSelector((state: RootState) => state.graph.text)\n  useEffect(() => {\n    const j = JSON.stringify(graph)\n    if (j !== previousGraph) {\n      setPreviousGraph(j)\n      setCurrentGraph(JSON.parse(j))\n      setVersion((parseInt(version) + 1).toString())\n    }\n    if (network) {\n      const n = network as any\n      const nodes = graph.nodes\n      const nodeIds = graph.nodes.map((n: Node) => n.id)\n      const removedNodes = JSON.parse(previousGraph).nodes.filter((n: Node) => nodeIds.indexOf(n.id) === -1)\n      n.body.data.nodes.remove(removedNodes)\n      n.body.data.nodes.update(nodes);\n\n      const edgeIds = graph.edges.map((e: Edge) => e.id)\n      const removedEdges = JSON.parse(previousGraph).edges.filter((n: Node) => edgeIds.indexOf(n.id) === -1)\n      n.body.data.edges.remove(removedEdges)\n      n.body.data.edges.update(graph.edges);\n      n.stabilize(1000)\n    }\n  }, [setPreviousGraph, graph, previousGraph, version, network])\n\n  const visJsRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!network) {\n      setNetwork(visJsRef.current && currentGraph &&\n        new Network(visJsRef.current, currentGraph, {\n          physics: {enabled: false},\n          edges: {\n            arrows: {\n              to: {\n                enabled: true,\n              }\n            }\n          },\n        }))\n    }\n  }, [visJsRef, currentGraph, network]);\n\n  return <>\n    <div ref={visJsRef} style={{width: '100%', height: '100vh', display: (tab === 1 || tab === 0) ? 'block' : 'none'}} />\n    <div style={{width: '100%', height: '100vh', display: tab === 2 ? 'block' : 'none'}}>\n      <ReactMarkdown children={markdown} />\n    </div>\n  </>\n}\n\nexport default Outline\n","import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from 'nanoid'\n\ninterface DriveState {\n  isSignedIn: boolean\n}\n\nconst initialState: DriveState = {\n  isSignedIn: false,\n}\n\nconst driveSlice = createSlice({\n  name: 'drive',\n  initialState,\n  reducers: {\n    setSignedIn: {\n      reducer(state, action) {\n        state.isSignedIn = action.payload\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n  },\n})\n\nexport const {\n  setSignedIn\n} = driveSlice.actions\nexport const login = () => async (dispatch: any) => {\n  return new Promise((resolve, reject) => {\n    gapi.load('client:auth2', async () => {\n      await gapi.client.init({\n        // this should not be hardcoded!\n        'apiKey': 'AIzaSyCLb1u522GN_FZMEyVtWWyeAcAnrCBZOek',\n        'clientId': '1005163744705-p4784hs6t18al7seej1e1oh4bsfqscej.apps.googleusercontent.com',\n        'scope': 'https://www.googleapis.com/auth/drive.appdata',\n        'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n      })\n\n      const status = gapi.auth2.getAuthInstance().isSignedIn.get()\n      if (!status) {\n        gapi.auth2.getAuthInstance().isSignedIn.listen((status: boolean) => {\n          resolve(dispatch(setSignedIn(status)))\n        })\n        gapi.auth2.getAuthInstance().signIn()\n      } else {\n        resolve(dispatch(setSignedIn(status)))\n      }\n    })\n  })\n}\n\nexport default driveSlice.reducer\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport { setGraph, setName, setDriveId } from './graphSlice'\nimport { login } from './driveSlice'\n\nexport default function LoadFromDrive({close}: {close: () => void}) {\n  const [loading, setLoading] = useState(true)\n  const [files, setFiles] = useState<{id: string, name: string}[]>([])\n  const dispatch = useDispatch()\n  const handleListItemClick = async ({id, name}: {id: string, name: string}) => {\n    const f = await (gapi.client.drive as any).files.get({\n      fileId: id,\n      alt: 'media',\n    });\n    await dispatch(setDriveId(id))\n    await dispatch(setName(name))\n    await dispatch(setGraph(JSON.parse(f.body).graph))\n    close()\n  };\n\n  useState(() => {\n    (async () => {\n      await dispatch(login());\n      const response = await (gapi.client as any).drive.files.list({\n        spaces: 'appDataFolder',\n        pageSize: 50,\n        fields: \"nextPageToken, files(id, name)\",\n        orderBy: 'modifiedTime desc',\n      })\n      setLoading(false)\n      const f = JSON.parse(response.body).files\n      setFiles(f)\n    })()\n  })\n\n  return (\n    <Dialog onClose={close} aria-labelledby=\"simple-dialog-title\" open={true}>\n      <DialogTitle id=\"simple-dialog-title\">\n        Cargar desde Drive\n        <IconButton><CloseIcon onClick={close} /></IconButton>\n      </DialogTitle>\n      {loading && <div style={{textAlign: 'center'}}><CircularProgress /></div>}\n      {!loading && <List>\n        {files.map((file) => (\n          <ListItem button onClick={() => handleListItemClick(file)} key={file.id}>\n            <ListItemText primary={file.name} />\n          </ListItem>\n        ))}\n      </List>}\n    </Dialog>\n  );\n}\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport ShareIcon from '@material-ui/icons/Share';\n// import ImageIcon from '@material-ui/icons/Image';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport IconButton from '@material-ui/core/IconButton';\nimport Divider from '@material-ui/core/Divider';\nimport dotparse, { NodeStatement, EdgeStatement } from 'dotparser'\n\nimport LoadFromDrive from './LoadFromDrive'\nimport { Node, Edge, setGraph, setName, setDriveId } from './graphSlice'\nimport { login } from './driveSlice'\nimport { setDrawerIsOpen } from './navigationSlice'\nimport type { RootState } from './store'\n\nfunction AppDrawer() {\n  const dispatch = useDispatch()\n  const graph = useSelector((state: RootState) => state.graph)\n  const drawerIsOpen = useSelector((state: RootState) => state.navigation.drawerIsOpen)\n  const [loadFromDriveOpen, setLoadFromDriveOpen] = useState(false)\n\n  const uploadDOT = () => {\n    const element = document.createElement('input');\n    element.setAttribute('type', 'file');\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n\n    element.onchange = () => {\n      const fileToLoad = element.files![0];\n\n      const getAttribute = (name: string, attrs: {id: string, eq: string}[]) => {\n        return attrs.find((a) => a.id === name)?.eq\n      }\n      const fileReader = new FileReader();\n      fileReader.onload = function(fileLoadedEvent){\n        const textFromFileLoaded = fileLoadedEvent.target!.result;\n        const st = dotparse(textFromFileLoaded as string)\n        const nodes = st[0].children\n            .filter((s) => s.type === 'node_stmt')\n            .map((n: NodeStatement | EdgeStatement, i) => n as NodeStatement)\n            .map((n: NodeStatement, i) => ({\n          id: i + 1,\n          label: n.node_id.id,\n          color: getAttribute('color', n.attr_list),\n          shape: getAttribute('shape', n.attr_list),\n        }))\n        const nodesByLabel = Object.fromEntries(nodes.map((n) => [n.label, n]))\n        const edges = st[0].children\n            .filter((s) => s.type === 'edge_stmt')\n            .map((n: NodeStatement | EdgeStatement, i) => n as EdgeStatement)\n            .map((n: EdgeStatement, i) => ({\n          id: i + 1,\n          from: nodesByLabel[n.edge_list[0].id].id,\n          to: nodesByLabel[n.edge_list[1].id].id,\n          color: getAttribute('color', n.attr_list),\n        }))\n        const graph = {\n          nodes,\n          edges,\n        }\n        dispatch(setGraph(graph))\n      };\n\n      fileReader.readAsText(fileToLoad, \"UTF-8\");\n    }\n  }\n\n  const downloadAsDOT = () => {\n    const nodes = Object.fromEntries(graph.nodes.map((node: Node) => [node.id, node]))\n    let text = 'digraph {\\n'\n    text += graph.nodes.map((n: Node) => `  \"${n.label}\"[shape=${n.shape}][color=${n.color}]`).join('\\n') + '\\n'\n    text += graph.edges.map((e: Edge) => `  \"${nodes[e.from].label}\"->\"${nodes[e.to].label}\"[color=${e.color}]`).join('\\n') + '\\n'\n    text += '}'\n    const filename = 'graph.dot'\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  /* TODO\n  const downloadAsPNG = () => {\n    const dt = visJsRef?.current?.getElementsByTagName('canvas')[0]\n    if (!dt) return\n    const href = dt.toDataURL().replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\n    const filename = 'graph.png'\n    const element = document.createElement('a');\n    element.setAttribute('href', href)\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n  */\n\n  const saveToDrive = async () => {\n    let name;\n    if (graph.name) {\n      name = graph.name\n    } else {\n      name = prompt('name?')\n      await dispatch(setName(name))\n    }\n    await dispatch(login());\n\n    let driveId = graph.driveId\n    if (!driveId) {\n      const response = await (gapi.client.drive as any).files.create({\n        parents: ['appDataFolder'],\n        'content-type': 'application/json',\n        uploadType: 'multipart',\n        name: name,\n        mimeType: 'application/json',\n        fields: 'id, name, kind, size'\n      })\n      await dispatch(setDriveId(response.result.id))\n      driveId = response.result.id\n    }\n\n    const g = {name: name || '', edges: graph.edges, nodes: graph.nodes, driveId: driveId}\n    const body = JSON.stringify({graph: g});\n    await fetch(`https://www.googleapis.com/upload/drive/v3/files/${driveId}`, {\n     method: 'PATCH',\n     headers: new Headers({\n       'Authorization': `Bearer ${gapi.client.getToken().access_token}`,\n       'Content-Type': 'application/json'\n     }),\n     body,\n    })\n  }\n\n  return (\n    <Drawer\n      open={drawerIsOpen}\n      >\n      <div>\n        <IconButton onClick={() => dispatch(setDrawerIsOpen(false))}>\n          <ChevronLeftIcon />\n        </IconButton>\n      </div>\n      <Divider />\n      <List>\n        <ListItem button style={{paddingRight: 100}} onClick={saveToDrive}>\n          <ListItemIcon><CloudUploadIcon /></ListItemIcon>\n          <ListItemText primary=\"Save to Drive\" />\n        </ListItem>\n        <ListItem button style={{paddingRight: 100}} onClick={() => setLoadFromDriveOpen(true)}>\n          <ListItemIcon><CloudDownloadIcon /></ListItemIcon>\n          <ListItemText primary=\"Load from Drive\" />\n        </ListItem>\n        <ListItem button style={{paddingRight: 100}} onClick={uploadDOT}>\n          <ListItemIcon><PublishIcon /></ListItemIcon>\n          <ListItemText primary=\"Upload DOT\" />\n        </ListItem>\n        <ListItem button style={{paddingRight: 100}} onClick={downloadAsDOT}>\n          <ListItemIcon><ShareIcon /></ListItemIcon>\n          <ListItemText primary=\"Download as DOT\" />\n        </ListItem>\n        {/*\n        <ListItem button style={{paddingRight: 100}}>\n          <ListItemIcon><ImageIcon /></ListItemIcon>\n          <ListItemText primary=\"Download as PNG\" />\n        </ListItem>\n        */}\n      </List>\n      {loadFromDriveOpen && <LoadFromDrive\n        close={() => setLoadFromDriveOpen(false)}\n        />}\n    </Drawer>\n  )\n}\n\nexport default AppDrawer\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport Editor from './Editor'\nimport Outline from './Outline'\nimport AppDrawer from './AppDrawer'\n\nimport { setDrawerIsOpen, Tab as TabType, setTab } from './navigationSlice'\nimport type { RootState } from './store'\n\nfunction App() {\n  const dispatch = useDispatch()\n  const tab = useSelector((state: RootState) => state.navigation.tab)\n  const drawerIsOpen = useSelector((state: RootState) => state.navigation.drawerIsOpen)\n  useHotkeys('alt+0', () => { dispatch(setDrawerIsOpen(!drawerIsOpen)) }, [drawerIsOpen])\n  useHotkeys('ctrl+1', () => { dispatch(setTab(0)) })\n  useHotkeys('ctrl+2', () => { dispatch(setTab(1)) })\n  useHotkeys('ctrl+3', () => { dispatch(setTab(2)) })\n  return (\n    <div>\n      <AppDrawer />\n      <AppBar position=\"static\" style={{display: 'flex', flexDirection: 'row'}}>\n        <Toolbar style={{minHeight: 0, padding: '0 10px'}}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            style={{margin: 0, padding: 0}}\n            onClick={() => dispatch(setDrawerIsOpen(true))}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n        <Tabs value={tab} onChange={(e: any, newTab: TabType) => dispatch(setTab(newTab))}>\n          <Tab label=\"Nodos\" />\n          <Tab label=\"Conectores\" />\n          <Tab label=\"Texto libre\" />\n        </Tabs>\n      </AppBar>\n      <div className=\"App\" style={{\n        display: 'flex',\n      }}>\n        <div style={{flex: 1}}>\n          <Editor tab={tab} />\n        </div>\n        <div style={{flex: 1}}>\n          <Outline tab={tab} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\nimport { combineReducers } from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport graph from './graphSlice'\nimport navigation from './navigationSlice'\nimport drive from './driveSlice'\n\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\n\nexport const store = createStore(\n  combineReducers({\n    graph,\n    navigation,\n    drive,\n  }),\n  composedEnhancer,\n)\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport { store } from './store'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}