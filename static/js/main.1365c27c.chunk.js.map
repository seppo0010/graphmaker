{"version":3,"sources":["ColorPickerView.tsx","graphSlice.ts","NodeView.tsx","NodesView.tsx","EdgeView.tsx","EdgesView.tsx","Editor.tsx","Outline.tsx","App.tsx","store.ts","index.tsx"],"names":["ColorOption","colorDispatchable","color","props","dispatch","useDispatch","Button","style","width","minWidth","height","borderWidth","borderColor","colorable","borderStyle","margin","background","onClick","dispatchable","ColorPickerView","colors","display","marginLeft","map","c","newId","nodes","Math","max","n","id","graphSlice","createSlice","name","initialState","label","shape","edges","from","to","reducers","addNode","reducer","state","action","push","payload","prepare","data","nanoid","addEdge","setNodeColor","node","find","setNodeShape","setEdgeColor","edge","deleteNode","filter","e","setGraph","actions","ShapeOption","star","box","ellipsis","triangle","shapes","ShapePicker","NodeView","listStyleType","padding","NodesView","graph","useSelector","useState","searchCriteria","setSearchCriteria","newNodeLabel","setNewNodeLabel","Typography","variant","component","gutterBottom","TextField","fullWidth","inputProps","InputProps","endAdornment","InputAdornment","position","IconButton","onBlur","evt","target","value","onChange","onKeyPress","key","blur","EdgeView","EdgesView","nodesById","Object","fromEntries","newEdgeFrom","setNewEdgeFrom","newEdgeTo","setNewEdgeTo","useEffect","Autocomplete","options","getOptionLabel","option","_","blurOnSelect","renderInput","params","Editor","setValue","overflow","AppBar","Tabs","newValue","Tab","hidden","Outline","version","setVersion","currentGraph","setCurrentGraph","previousGraph","setPreviousGraph","network","setNetwork","j","JSON","stringify","parse","parseInt","toString","nodeIds","removedNodes","indexOf","body","remove","update","stabilize","visJsRef","useRef","current","Network","physics","enabled","arrows","top","right","zIndex","element","document","createElement","setAttribute","appendChild","click","removeChild","onchange","fileToLoad","files","getAttribute","attrs","a","eq","fileReader","FileReader","onload","fileLoadedEvent","textFromFileLoaded","result","st","dotparse","console","log","children","s","type","i","node_id","attr_list","nodesByLabel","edge_list","readAsText","text","join","encodeURIComponent","dt","getElementsByTagName","href","toDataURL","replace","ref","App","className","flex","store","configureStore","combineReducers","ReactDOM","render","StrictMode","getElementById"],"mappings":"gZAcA,SAASA,EAAT,GAAkH,IAA5FC,EAA2F,EAA3FA,kBAAmBC,EAAwE,EAAxEA,MAAUC,EAA8D,6CACzGC,EAAWC,cACjB,OAAO,cAACC,EAAA,EAAD,CAAQC,MAAK,aAClBC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRC,YAAa,EACbC,YAAaX,EAAkBY,UAAUX,QAAUA,EAAQ,MAAQ,QACnEY,YAAa,QACbC,OAAQ,EACRC,WAAYd,GACTC,GACFc,QAAS,WACVb,EAASH,EAAkBiB,aAAahB,OAoB7BiB,MAhBf,YAMI,IALAlB,EAKD,EALCA,kBACAmB,EAID,EAJCA,OAKF,OACE,qBAAKb,MAAO,CAACc,QAAS,OAAQC,YAAa,GAA3C,SACGF,EAAOG,KAAI,SAACC,GAAD,OACV,cAACxB,EAAD,CAAqBC,kBAAmBA,EAAmBC,MAAOsB,GAAhDA,S,wBCdpBC,EAAQ,SAACC,GACb,OAAOC,KAAKC,IAAL,MAAAD,KAAI,YAAQD,EAAMH,KAAI,SAACM,GAAD,OAAOA,EAAEC,OAAO,IAAK,GAmB9CC,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAlB+B,CAC/BR,MAAO,CACL,CAAEI,GAAI,EAAGK,MAAO,SAAUjC,MAAO,MAAOkC,MAAO,OAC/C,CAAEN,GAAI,EAAGK,MAAO,SAAUjC,MAAO,QAASkC,MAAO,OACjD,CAAEN,GAAI,EAAGK,MAAO,SAAUjC,MAAO,QAASkC,MAAO,OACjD,CAAEN,GAAI,EAAGK,MAAO,SAAUjC,MAAO,QAASkC,MAAO,OACjD,CAAEN,GAAI,EAAGK,MAAO,SAAUjC,MAAO,QAASkC,MAAO,QAEnDC,MAAO,CACL,CAAEP,GAAI,EAAGQ,KAAM,EAAGC,GAAI,EAAGrC,MAAO,SAChC,CAAE4B,GAAI,EAAGQ,KAAM,EAAGC,GAAI,EAAGrC,MAAO,SAChC,CAAE4B,GAAI,EAAGQ,KAAM,EAAGC,GAAI,EAAGrC,MAAO,SAChC,CAAE4B,GAAI,EAAGQ,KAAM,EAAGC,GAAI,EAAGrC,MAAO,WAOlCsC,SAAU,CACRC,QAAS,CACPC,QADO,SACCC,EAAOC,GACbD,EAAMjB,MAAMmB,KAAK,CACff,GAAIL,EAAMkB,EAAMjB,OAChBS,MAAOS,EAAOE,QAAQX,MACtBC,MAAO,MACPlC,MAAO,WAGX6C,QATO,SASCC,GAAa,MAAO,CAAElB,GAAImB,cAAUH,QAASE,KAEvDE,QAAS,CACPR,QADO,SACCC,EAAOC,GACbD,EAAMN,MAAMQ,KAAK,CACff,GAAIL,EAAMkB,EAAMN,OAChBC,KAAMM,EAAOE,QAAQR,KAAKR,GAC1BS,GAAIK,EAAOE,QAAQP,GAAGT,GACtB5B,MAAO,WAGX6C,QATO,SASCC,GAAa,MAAO,CAAElB,GAAImB,cAAUH,QAASE,KAEvDG,aAAc,CACZT,QADY,SACJC,EAAOC,GACb,IAAMQ,EAAOT,EAAMjB,MAAM2B,MAAK,SAACxB,GAAD,OAAOA,EAAEC,KAAOc,EAAOE,QAAQM,KAAKtB,MAC7DsB,IAGLA,EAAKlD,MAAQ0C,EAAOE,QAAQ5C,QAE9B6C,QARY,SAQJC,GAAa,MAAO,CAAElB,GAAImB,cAAUH,QAASE,KAEvDM,aAAc,CACZZ,QADY,SACJC,EAAOC,GACb,IAAMQ,EAAOT,EAAMjB,MAAM2B,MAAK,SAACxB,GAAD,OAAOA,EAAEC,KAAOc,EAAOE,QAAQM,KAAKtB,MAC7DsB,IAGLA,EAAKhB,MAAQQ,EAAOE,QAAQV,QAE9BW,QARY,SAQJC,GAAa,MAAO,CAAElB,GAAImB,cAAUH,QAASE,KAEvDO,aAAc,CACZb,QADY,SACJC,EAAOC,GACb,IAAMY,EAAOb,EAAMN,MAAMgB,MAAK,SAACxB,GAAD,OAAOA,EAAEC,KAAOc,EAAOE,QAAQU,KAAK1B,MAC7D0B,IAGLA,EAAKtD,MAAQ0C,EAAOE,QAAQ5C,QAE9B6C,QARY,SAQJC,GAAa,MAAO,CAAElB,GAAImB,cAAUH,QAASE,KAEvDS,WAAY,CACVf,QADU,SACFC,EAAOC,GACbD,EAAMjB,MAAQiB,EAAMjB,MAAMgC,QAAO,SAAC7B,GAAD,OAAOA,EAAEC,KAAOc,EAAOE,QAAQhB,MAChEa,EAAMN,MAAQM,EAAMN,MAAMqB,QAAO,SAACC,GAAD,OAAOA,EAAErB,OAASM,EAAOE,QAAQhB,IAAM6B,EAAEpB,KAAOK,EAAOE,QAAQhB,OAElGiB,QALU,SAKFC,GAAa,MAAO,CAAElB,GAAImB,cAAUH,QAASE,KAEvDY,SAAU,CACRlB,QADQ,SACAC,EAAOC,GACbD,EAAMjB,MAAQkB,EAAOE,QAAQpB,MAC7BiB,EAAMN,MAAQO,EAAOE,QAAQT,OAE/BU,QALQ,SAKAC,GAAa,MAAO,CAAElB,GAAImB,cAAUH,QAASE,Q,EAavDjB,EAAW8B,QAPbpB,E,EAAAA,QACAS,E,EAAAA,QACAC,E,EAAAA,aACAG,E,EAAAA,aACAC,E,EAAAA,aACAE,E,EAAAA,WACAG,E,EAAAA,SAEa7B,IAAf,QCnHA,SAAS+B,EAAT,GAA2E,IAArDV,EAAoD,EAApDA,KAAMhB,EAA8C,EAA9CA,MAAUjC,EAAoC,gCAClEC,EAAWC,cACjB,OAAO,cAACC,EAAA,EAAD,CAAQC,MAAK,aAClBC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRK,OAAQ,EACRb,MAAOkC,IAAUgB,EAAKhB,MAAQ,OAAS,SACpCjC,GACFc,QAAS,WACVb,EAASkD,EAAa,CAAEF,OAAMhB,YARzB,SASH,CACF2B,KAAM,cAAC,IAAD,IACNC,IAAK,cAAC,IAAD,IACLC,SAAU,cAAC,IAAD,IACVC,SAAU,cAAC,IAAD,KACV9B,KAGJ,IAAM+B,EAAkB,CAAC,OAAQ,MAAO,WAAY,YACpD,SAASC,EAAT,GAA4C,IAAtBhB,EAAqB,EAArBA,KACpB,OACE,qBAAK7C,MAAO,CAACc,QAAS,OAAQC,YAAa,GAA3C,SACG6C,EAAO5C,KAAI,SAACC,GAAD,OACV,cAACsC,EAAD,CAAqBV,KAAMA,EAAMhB,MAAOZ,GAAtBA,QAiCX6C,MA3Bf,YAAyC,IAAtBjB,EAAqB,EAArBA,KACXhD,EAAWC,cAEjB,OACE,qBAAIE,MAAO,CAAC+D,cAAe,OAAQvD,OAAQ,GAA3C,UACGqC,EAAKjB,MACN,sBAAK5B,MAAO,CAACc,QAAS,QAAtB,UACE,gCACE,cAAC,EAAD,CACEpB,kBAAmB,CACjBY,UAAWuC,EACXlC,aAAc,SAAChB,GAAD,OAAkBiD,EAAa,CAACC,OAAMlD,YAEtDkB,OAAQ,CAAC,QAAS,MAAO,OAAQ,YAEnC,cAACgD,EAAD,CAAahB,KAAMA,OAErB,8BACE,cAAC9C,EAAA,EAAD,CAAQC,MAAO,CAACgE,QAAS,GAAI9D,SAAU,EAAGD,MAAO,GAAIE,OAAQ,IAAKO,QAhB9D,kBAAMb,EAASqD,EAAWL,KAgB9B,SACE,cAAC,IAAD,eCUGoB,OA5Df,WACE,IAAMpE,EAAWC,cACXoE,EAAQC,aAAY,SAAC/B,GAAD,OAAsBA,EAAM8B,SAFnC,EAGyBE,mBAAS,IAHlC,mBAGZC,EAHY,KAGIC,EAHJ,OAIqBF,mBAAS,IAJ9B,mBAIZG,EAJY,KAIEC,EAJF,KAYnB,OACE,gCACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAApD,mBAGA,cAACC,EAAA,EAAD,CACEC,WAAS,EACTlD,MAAM,SACNmD,WAAY,CAAE,aAAc,UAC5BC,WAAY,CACVC,aACE,eAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACCd,GACC,cAACe,EAAA,EAAD,CACE1E,QAAS,kBAAM4D,EAAkB,KADnC,SAGE,cAAC,IAAD,OAGFD,GACA,cAACe,EAAA,EAAD,CACE1E,QAAS,aADX,SAGI,cAAC,IAAD,YAOZ,cAACmE,EAAA,EAAD,CACEC,WAAS,EACTlD,MAAM,kBACNyD,OAxCU,SAACC,GACf,IAAM1D,EAAQ0D,EAAIC,OAAOC,MACrB5D,IACF/B,EAASqC,EAAQ,CAAEN,QAAOjC,MAAO,WACjC6E,EAAgB,MAqCdgB,MAAOjB,EACPkB,SAAU,SAACH,GAAD,OAASd,EAAgBc,EAAIC,OAAOC,QAC9CE,WAAY,SAACJ,GAAD,MAAqB,UAAZA,EAAIK,KAAoBL,EAAIC,OAA4BK,UAE/E,oBAAI5F,MAAO,CAACgE,QAAS,GAArB,SACGE,EAAM/C,MAAMH,KAAI,SAAC6B,GAAD,OACf,cAAC,EAAD,CACEA,KAAMA,GADOA,EAAKtB,a,UC7CfsE,OAff,YAAyE,IAAtD5C,EAAqD,EAArDA,KAAMlB,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,GAC7B,OACE,qBAAIhC,MAAO,CAAC+D,cAAe,OAAQvD,OAAQ,GAA3C,UACGuB,EAAKH,MADR,MACkBI,EAAGJ,MACnB,cAAC,EAAD,CACElC,kBAAmB,CACjBY,UAAW2C,EACXtC,aAAc,SAAChB,GAAD,OAAkBqD,EAAa,CAACC,OAAMtD,YAEtDkB,OAAQ,CAAC,QAAS,MAAO,OAAQ,gBCiF1BiF,OAjFf,WACE,IAAMjG,EAAWC,cACXgC,EAAQqC,aAAY,SAAC/B,GAAD,OAAsBA,EAAM8B,MAAMpC,SACtDX,EAAQgD,aAAY,SAAC/B,GAAD,OAAsBA,EAAM8B,MAAM/C,SACtD4E,EAAYC,OAAOC,YAAY9E,EAAMH,KAAI,SAAC6B,GAAD,MAAgB,CAACA,EAAKtB,GAAIsB,OAJtD,EAKyBuB,mBAAS,IALlC,mBAKZC,EALY,KAKIC,EALJ,OAMmBF,mBAAsB,MANzC,mBAMZ8B,EANY,KAMCC,EAND,OAOe/B,mBAAsB,MAPrC,mBAOZgC,EAPY,KAODC,EAPC,KAcnB,OANAC,qBAAU,WACHJ,GAAgBE,IACrBvG,EAAS8C,EAAQ,CAAC,KAAQuD,EAAalE,GAAIoE,KAC3CD,EAAe,MACfE,EAAa,SACZ,CAACF,EAAgBE,EAAcH,EAAaE,EAAWvG,IAExD,gCACE,cAAC4E,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAApD,wBAGA,cAACC,EAAA,EAAD,CACEC,WAAS,EACTlD,MAAM,SACNmD,WAAY,CAAE,aAAc,UAC5BC,WAAY,CACVC,aACE,eAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACCd,GACC,cAACe,EAAA,EAAD,CACE1E,QAAS,kBAAM4D,EAAkB,KADnC,SAGE,cAAC,IAAD,OAGFD,GACA,cAACe,EAAA,EAAD,CACE1E,QAAS,aADX,SAGI,cAAC,IAAD,YAOZ,cAAC6F,GAAA,EAAD,CACEC,QAASrF,EACTsF,eAAgB,SAACC,GAAD,OAAYA,EAAO9E,OACnC6D,SAAU,SAACkB,EAAGnB,GAAJ,OAAcW,EAAeX,IACvCA,MAAOU,EACPU,cAAY,EACZC,YAAa,SAACC,GAAD,OACX,cAACjC,EAAA,EAAD,2BACMiC,GADN,IAEEhC,WAAS,EACTlD,MAAM,kCAIZ,cAAC2E,GAAA,EAAD,CACEC,QAASrF,EACTsF,eAAgB,SAACC,GAAD,OAAYA,EAAO9E,OACnCgF,cAAY,EACZnB,SAAU,SAACkB,EAAGnB,GAAJ,OAAca,EAAab,IACrCA,MAAOY,EACPS,YAAa,SAACC,GAAD,OACX,cAACjC,EAAA,EAAD,2BACMiC,GADN,IAEEhC,WAAS,EACTlD,MAAM,kCAIZ,oBAAI5B,MAAO,CAACgE,QAAS,GAArB,SACGlC,EAAMd,KAAI,SAACiC,GAAD,OACT,cAAC,GAAD,CAAwBA,KAAMA,EAAMlB,KAAMgE,EAAU9C,EAAKlB,MAAOC,GAAI+D,EAAU9C,EAAKjB,KAApEiB,EAAK1B,aCxDfwF,OAzBf,WAAmB,IAAD,EACU3C,mBAAS,GADnB,mBACToB,EADS,KACFwB,EADE,KAEhB,OACE,sBAAKhH,MAAO,CAACG,OAAQ,QAAS8G,SAAU,QAAxC,UACE,cAACC,EAAA,EAAD,CAAQ/B,SAAS,SAAjB,SACE,eAACgC,EAAA,EAAD,CAAM3B,MAAOA,EAAOC,SAAU,SAACrC,EAAQgE,GAAT,OAA8BJ,EAASI,IAArE,UACE,cAACC,EAAA,EAAD,CAAKzF,MAAM,UACX,cAACyF,EAAA,EAAD,CAAKzF,MAAM,eACX,cAACyF,EAAA,EAAD,CAAKzF,MAAM,qBAGf,sBAAK5B,MAAO,CAACgE,QAAS,IAAtB,UACE,qBAAKsD,OAAkB,IAAV9B,EAAb,SACE,cAAC,GAAD,MAEF,qBAAK8B,OAAkB,IAAV9B,EAAb,SACE,cAAC,GAAD,MAEF,qBAAK8B,OAAkB,IAAV9B,EAAb,+B,6BC6HO+B,OA7If,WACE,IAAMrD,EAAQC,aAAY,SAAC/B,GAAD,OAAsBA,EAAM8B,SADrC,EAEaE,mBAAS,KAFtB,mBAEVoD,EAFU,KAEDC,EAFC,OAGuBrD,mBAA8B,MAHrD,mBAGVsD,EAHU,KAGIC,EAHJ,OAIyBvD,mBAAS,IAJlC,mBAIVwD,EAJU,KAIKC,EAJL,OAKazD,mBAAyB,MALtC,mBAKV0D,EALU,KAKDC,EALC,KAMXlI,EAAWC,cACjBwG,qBAAU,WACR,IAAM0B,EAAIC,KAAKC,UAAUhE,GAMzB,GALI8D,IAAMJ,IACRC,EAAiBG,GACjBL,EAAgBM,KAAKE,MAAMH,IAC3BP,GAAYW,SAASZ,GAAW,GAAGa,aAEjCP,EAAS,CACX,IAAMxG,EAAIwG,EACJ3G,EAAQ+C,EAAM/C,MACdmH,EAAUpE,EAAM/C,MAAMH,KAAI,SAACM,GAAD,OAAOA,EAAEC,MACnCgH,EAAeN,KAAKE,MAAMP,GAAezG,MAAMgC,QAAO,SAAC7B,GAAD,OAAwC,IAA3BgH,EAAQE,QAAQlH,EAAEC,OAC3FD,EAAEmH,KAAKhG,KAAKtB,MAAMuH,OAAOH,GACzBjH,EAAEmH,KAAKhG,KAAKtB,MAAMwH,OAAOxH,GACzBG,EAAEmH,KAAKhG,KAAKX,MAAM6G,OAAOzE,EAAMpC,OAC/BR,EAAEsH,UAAU,QAEb,CAACf,EAAkB3D,EAAO0D,EAAeJ,EAASM,IAErD,IAAMe,EAAWC,iBAAuB,MAyGxC,OAxGAxC,qBAAU,WACHwB,GACHC,EAAWc,EAASE,SAAWrB,GAC7B,IAAIsB,WAAQH,EAASE,QAASrB,EAAc,CAC1CuB,QAAS,CAACC,SAAS,GACnBpH,MAAO,CACLqH,OAAQ,CACNnH,GAAI,CACFkH,SAAS,UAMpB,CAACL,EAAUnB,EAAcI,IA0FrB,qCACL,sBAAK9H,MAAO,CAACmF,SAAU,WAAYiE,IAAK,EAAGC,MAAO,EAAG5I,WAAY,QAAS6I,OAAQ,GAAlF,UACE,cAACvJ,EAAA,EAAD,CAAQW,QA1FM,WAChB,IAAM6I,EAAUC,SAASC,cAAc,SACvCF,EAAQG,aAAa,OAAQ,QAE7BH,EAAQvJ,MAAMc,QAAU,OACxB0I,SAASf,KAAKkB,YAAYJ,GAE1BA,EAAQK,QAERJ,SAASf,KAAKoB,YAAYN,GAE1BA,EAAQO,SAAW,WACjB,IAAMC,EAAaR,EAAQS,MAAO,GAE5BC,EAAe,SAACvI,EAAcwI,GAAuC,IAAD,EACxE,iBAAOA,EAAMpH,MAAK,SAACqH,GAAD,OAAOA,EAAE5I,KAAOG,YAAlC,aAAO,EAAkC0I,IAErCC,EAAa,IAAIC,WACvBD,EAAWE,OAAS,SAASC,GAC3B,IAAMC,EAAqBD,EAAgBjF,OAAQmF,OAC7CC,EAAKC,KAASH,GAClBI,QAAQC,IAAIH,GACd,IAAMxJ,EAAQwJ,EAAG,GAAGI,SACf5H,QAAO,SAAC6H,GAAD,MAAkB,cAAXA,EAAEC,QAChBjK,KAAI,SAACM,EAAkC4J,GAAnC,OAAyC5J,KAC7CN,KAAI,SAACM,EAAkB4J,GAAnB,MAA0B,CACjC3J,GAAI2J,EAAI,EACRtJ,MAAON,EAAE6J,QAAQ5J,GACjB5B,MAAOsK,EAAa,QAAS3I,EAAE8J,WAC/BvJ,MAAOoI,EAAa,QAAS3I,EAAE8J,eAE3BC,EAAerF,OAAOC,YAAY9E,EAAMH,KAAI,SAACM,GAAD,MAAO,CAACA,EAAEM,MAAON,OAC7DQ,EAAQ6I,EAAG,GAAGI,SACf5H,QAAO,SAAC6H,GAAD,MAAkB,cAAXA,EAAEC,QAChBjK,KAAI,SAACM,EAAkC4J,GAAnC,OAAyC5J,KAC7CN,KAAI,SAACM,EAAkB4J,GAAnB,MAA0B,CACjC3J,GAAI2J,EAAI,EACRnJ,KAAMsJ,EAAa/J,EAAEgK,UAAU,GAAG/J,IAAIA,GACtCS,GAAIqJ,EAAa/J,EAAEgK,UAAU,GAAG/J,IAAIA,GACpC5B,MAAOsK,EAAa,QAAS3I,EAAE8J,eAMjCvL,EAASwD,EAJK,CACZlC,QACAW,YAKJuI,EAAWkB,WAAWxB,EAAY,WA0ClC,wBACA,cAAChK,EAAA,EAAD,CAAQW,QAvCU,WACpB,IAAMS,EAAQ6E,OAAOC,YAAY/B,EAAM/C,MAAMH,KAAI,SAAC6B,GAAD,MAAgB,CAACA,EAAKtB,GAAIsB,OACvE2I,EAAO,cACXA,GAAQtH,EAAM/C,MAAMH,KAAI,SAACM,GAAD,mBAAmBA,EAAEM,MAArB,mBAAqCN,EAAEO,MAAvC,mBAAuDP,EAAE3B,MAAzD,QAAmE8L,KAAK,MAAQ,KACxGD,GAAQtH,EAAMpC,MAAMd,KAAI,SAACoC,GAAD,mBAAmBjC,EAAMiC,EAAErB,MAAMH,MAAjC,eAA6CT,EAAMiC,EAAEpB,IAAIJ,MAAzD,mBAAyEwB,EAAEzD,MAA3E,QAAqF8L,KAAK,MAAQ,KAC1HD,GAAQ,IACR,IACMjC,EAAUC,SAASC,cAAc,KACvCF,EAAQG,aAAa,OAAQ,iCAAmCgC,mBAAmBF,IACnFjC,EAAQG,aAAa,WAHJ,aAKjBH,EAAQvJ,MAAMc,QAAU,OACxB0I,SAASf,KAAKkB,YAAYJ,GAE1BA,EAAQK,QAERJ,SAASf,KAAKoB,YAAYN,IAuBxB,6BACA,cAACxJ,EAAA,EAAD,CAAQW,QArBU,WAAO,IAAD,EACpBiL,EAAE,OAAG9C,QAAH,IAAGA,GAAH,UAAGA,EAAUE,eAAb,aAAG,EAAmB6C,qBAAqB,UAAU,GAC7D,GAAKD,EAAL,CACA,IAAME,EAAOF,EAAGG,YAAYC,QAAQ,oBAAqB,iCAEnDxC,EAAUC,SAASC,cAAc,KACvCF,EAAQG,aAAa,OAAQmC,GAC7BtC,EAAQG,aAAa,WAHJ,aAKjBH,EAAQvJ,MAAMc,QAAU,OACxB0I,SAASf,KAAKkB,YAAYJ,GAE1BA,EAAQK,QAERJ,SAASf,KAAKoB,YAAYN,KAOxB,gCAEF,qBAAKyC,IAAKnD,EAAU7I,MAAO,CAACC,MAAO,OAAQE,OAAQ,eC/HxC8L,OAff,WACE,OACE,sBAAKC,UAAU,MAAMlM,MAAO,CAC1Bc,QAAS,QADX,UAGE,qBAAKd,MAAO,CAACmM,KAAM,GAAnB,SACE,cAAC,GAAD,MAEF,qBAAKnM,MAAO,CAACmM,KAAM,GAAnB,SACE,cAAC,GAAD,U,SCTKC,GAAQC,YAAe,CAClClK,QAASmK,aAAgB,CACvBpI,Y,MCCJqI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJ5C,SAASkD,eAAe,W","file":"static/js/main.1365c27c.chunk.js","sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\n\nimport type { Color } from './graphSlice'\n\nexport interface Colorable {\n  color: Color\n}\nexport interface ColorDispatchable {\n  colorable: Colorable\n  dispatchable: (color: Color) => void\n}\n\nfunction ColorOption({colorDispatchable, color, ...props}: {color: Color, colorDispatchable: ColorDispatchable}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    borderWidth: 4,\n    borderColor: colorDispatchable.colorable.color === color ? 'red' : 'black',\n    borderStyle: 'solid',\n    margin: 8,\n    background: color,\n    ...props\n  }} onClick={() => {\n    dispatch(colorDispatchable.dispatchable(color))\n  }}></Button>\n}\n\nfunction ColorPickerView({\n    colorDispatchable,\n    colors,\n}: {\n    colorDispatchable: ColorDispatchable,\n    colors: Color[]\n}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {colors.map((c) => (\n        <ColorOption key={c} colorDispatchable={colorDispatchable} color={c} />\n      ))}\n    </div>\n  )\n}\n\nexport default ColorPickerView\n","import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from 'nanoid'\n\nexport type Color = 'white' | 'red' | 'blue' | 'yellow' | 'black'\nexport type Shape = 'star' | 'box' | 'ellipsis' | 'triangle'\n\ninterface WithId {\n  id: number\n}\n\nexport interface Node extends WithId {\n  label: string\n  color: Color\n  shape: Shape\n}\n\nexport interface Edge extends WithId {\n  from: number\n  to: number\n  color: Color\n}\n\ninterface GraphState {\n  nodes: Node[]\n  edges: Edge[]\n}\n\nconst newId = (nodes: WithId[]) => {\n  return Math.max(...nodes.map((n) => n.id) || 0) + 1\n}\n\nconst initialState: GraphState = {\n  nodes: [\n    { id: 1, label: 'Node 1', color: 'red', shape: 'box' },\n    { id: 2, label: 'Node 2', color: 'white', shape: 'box' },\n    { id: 3, label: 'Node 3', color: 'white', shape: 'box' },\n    { id: 4, label: 'Node 4', color: 'white', shape: 'box' },\n    { id: 5, label: 'Node 5', color: 'white', shape: 'box' },\n  ],\n  edges: [\n    { id: 1, from: 1, to: 2, color: 'black' },\n    { id: 2, from: 1, to: 3, color: 'black' },\n    { id: 3, from: 2, to: 4, color: 'black' },\n    { id: 4, from: 2, to: 5, color: 'black' }\n  ],\n}\n\nconst graphSlice = createSlice({\n  name: 'graph',\n  initialState,\n  reducers: {\n    addNode: {\n      reducer(state, action) {\n        state.nodes.push({\n          id: newId(state.nodes),\n          label: action.payload.label,\n          shape: 'box',\n          color: 'white',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    addEdge: {\n      reducer(state, action) {\n        state.edges.push({\n          id: newId(state.edges),\n          from: action.payload.from.id,\n          to: action.payload.to.id,\n          color: 'black',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeColor: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeShape: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.shape = action.payload.shape\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setEdgeColor: {\n      reducer(state, action) {\n        const edge = state.edges.find((n) => n.id === action.payload.edge.id)\n        if (!edge) {\n          return\n        }\n        edge.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    deleteNode: {\n      reducer(state, action) {\n        state.nodes = state.nodes.filter((n) => n.id !== action.payload.id)\n        state.edges = state.edges.filter((e) => e.from !== action.payload.id && e.to !== action.payload.id)\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setGraph: {\n      reducer(state, action) {\n        state.nodes = action.payload.nodes\n        state.edges = action.payload.edges\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n  },\n})\n\nexport const {\n  addNode,\n  addEdge,\n  setNodeColor,\n  setNodeShape,\n  setEdgeColor,\n  deleteNode,\n  setGraph,\n} = graphSlice.actions\nexport default graphSlice.reducer\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport StarIcon from '@material-ui/icons/StarBorder';\nimport BoxIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CircleIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport TriangleIcon from '@material-ui/icons/ChangeHistory';\n\nimport ColorPickerView from './ColorPickerView'\nimport { Color, setNodeColor, setNodeShape, deleteNode } from './graphSlice'\nimport type { Node, Shape } from './graphSlice'\n\nfunction ShapeOption({node, shape, ...props}: {node: Node, shape: Shape}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    margin: 8,\n    color: shape === node.shape ? 'blue' : 'black',\n    ...props\n  }} onClick={() => {\n    dispatch(setNodeShape({ node, shape }))\n  }}>{{\n    star: <StarIcon />,\n    box: <BoxIcon />,\n    ellipsis: <CircleIcon />,\n    triangle: <TriangleIcon />,\n  }[shape]}</Button>\n}\n\nconst shapes: Shape[] = ['star', 'box', 'ellipsis', 'triangle']\nfunction ShapePicker({node}: {node: Node}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {shapes.map((c) => (\n        <ShapeOption key={c} node={node} shape={c} />\n      ))}\n    </div>\n  )\n}\n\nfunction NodeView({node}: {node: Node}) {\n  const dispatch = useDispatch()\n  const del = () => dispatch(deleteNode(node))\n  return (\n    <li style={{listStyleType: 'none', margin: 0}}>\n      {node.label}\n      <div style={{display: 'flex'}}>\n        <div>\n          <ColorPickerView\n            colorDispatchable={{\n              colorable: node,\n              dispatchable: (color: Color) => setNodeColor({node, color}),\n            }}\n            colors={['white', 'red', 'blue', 'yellow']}\n            />\n          <ShapePicker node={node} />\n        </div>\n        <div>\n          <Button style={{padding: 22, minWidth: 0, width: 24, height: 24}} onClick={del}>\n            <DeleteIcon />\n          </Button>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default NodeView\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport NodeView from './NodeView'\nimport { addNode, Node } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction NodesView() {\n  const dispatch = useDispatch()\n  const graph = useSelector((state: RootState) => state.graph)\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newNodeLabel, setNewNodeLabel] = useState('')\n  const newNode = (evt: React.FocusEvent<HTMLInputElement>) => {\n    const label = evt.target.value;\n    if (label) {\n      dispatch(addNode({ label, color: 'white' }))\n      setNewNodeLabel('')\n    }\n  }\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Nodos\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar' }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"Agregar nodo...\"\n        onBlur={newNode}\n        value={newNodeLabel}\n        onChange={(evt) => setNewNodeLabel(evt.target.value)}\n        onKeyPress={(evt) => evt.key === 'Enter' && (evt.target as HTMLInputElement).blur()}\n        />\n      <ul style={{padding: 0}}>\n        {graph.nodes.map((node: Node) => (\n          <NodeView key={node.id}\n            node={node}\n            />\n        ))}\n      </ul>\n    </div>\n  )\n}\nexport default NodesView\n","import React from 'react'\n\nimport { Node, Edge, Color, setEdgeColor } from './graphSlice'\nimport ColorPickerView from './ColorPickerView'\n\nfunction EdgeView({edge, from, to}: {edge: Edge, from: Node, to: Node}) {\n  return (\n    <li style={{listStyleType: 'none', margin: 0}}>\n      {from.label} - {to.label}\n      <ColorPickerView\n        colorDispatchable={{\n          colorable: edge,\n          dispatchable: (color: Color) => setEdgeColor({edge, color}),\n        }}\n        colors={['black', 'red', 'blue', 'yellow']}\n        />\n    </li>\n  )\n}\n\nexport default EdgeView\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport EdgeView from './EdgeView'\nimport { Node, Edge, addEdge } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction EdgesView() {\n  const dispatch = useDispatch()\n  const edges = useSelector((state: RootState) => state.graph.edges)\n  const nodes = useSelector((state: RootState) => state.graph.nodes)\n  const nodesById = Object.fromEntries(nodes.map((node: Node) => [node.id, node]))\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newEdgeFrom, setNewEdgeFrom] = useState<Node | null>(null)\n  const [newEdgeTo, setNewEdgeTo] = useState<Node | null>(null)\n  useEffect(() => {\n    if (!newEdgeFrom || !newEdgeTo) return\n    dispatch(addEdge({'from': newEdgeFrom, to: newEdgeTo}))\n    setNewEdgeFrom(null)\n    setNewEdgeTo(null)\n  }, [setNewEdgeFrom, setNewEdgeTo, newEdgeFrom, newEdgeTo, dispatch])\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Conectores\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar' }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        onChange={(_, value) => setNewEdgeFrom(value)}\n        value={newEdgeFrom}\n        blurOnSelect\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector desde...\"\n            />\n          )}\n        />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        blurOnSelect\n        onChange={(_, value) => setNewEdgeTo(value)}\n        value={newEdgeTo}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector hacia...\"\n            />\n          )}\n        />\n      <ul style={{padding: 0}}>\n        {edges.map((edge: Edge) => (\n          <EdgeView key={edge.id} edge={edge} from={nodesById[edge.from]} to={nodesById[edge.to]} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default EdgesView\n","import React, { useState } from 'react'\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport NodesView from './NodesView';\nimport EdgesView from './EdgesView';\n\nfunction Editor() {\n  const [value, setValue] = useState(0)\n  return (\n    <div style={{height: '100vh', overflow: 'auto'}}>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={(e: any, newValue: number) => setValue(newValue)}>\n          <Tab label=\"Nodos\" />\n          <Tab label=\"Conectores\" />\n          <Tab label=\"Texto libre\" />\n        </Tabs>\n      </AppBar>\n      <div style={{padding: 20}}>\n        <div hidden={value !== 0}>\n          <NodesView />\n        </div>\n        <div hidden={value !== 1}>\n          <EdgesView />\n        </div>\n        <div hidden={value !== 2}>\n          Item Three\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Editor\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Network } from 'vis-network'\nimport Button from '@material-ui/core/Button';\nimport dotparse, { NodeStatement, EdgeStatement } from 'dotparser'\n\nimport { Node, Edge, setGraph } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction Outline() {\n  const graph = useSelector((state: RootState) => state.graph)\n  const [version, setVersion] = useState('0')\n  const [currentGraph, setCurrentGraph] = useState<null | typeof graph>(null)\n  const [previousGraph, setPreviousGraph] = useState('')\n  const [network, setNetwork] = useState<Network | null>(null)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    const j = JSON.stringify(graph)\n    if (j !== previousGraph) {\n      setPreviousGraph(j)\n      setCurrentGraph(JSON.parse(j))\n      setVersion((parseInt(version) + 1).toString())\n    }\n    if (network) {\n      const n = network as any\n      const nodes = graph.nodes\n      const nodeIds = graph.nodes.map((n) => n.id)\n      const removedNodes = JSON.parse(previousGraph).nodes.filter((n: Node) => nodeIds.indexOf(n.id) === -1)\n      n.body.data.nodes.remove(removedNodes)\n      n.body.data.nodes.update(nodes);\n      n.body.data.edges.update(graph.edges);\n      n.stabilize(1000)\n    }\n  }, [setPreviousGraph, graph, previousGraph, version, network])\n\n  const visJsRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!network) {\n      setNetwork(visJsRef.current && currentGraph &&\n        new Network(visJsRef.current, currentGraph, {\n          physics: {enabled: false},\n          edges: {\n            arrows: {\n              to: {\n                enabled: true,\n              }\n            }\n          },\n        }))\n    }\n  }, [visJsRef, currentGraph, network]);\n\n  const uploadDOT = () => {\n    const element = document.createElement('input');\n    element.setAttribute('type', 'file');\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n\n    element.onchange = () => {\n      const fileToLoad = element.files![0];\n\n      const getAttribute = (name: string, attrs: {id: string, eq: string}[]) => {\n        return attrs.find((a) => a.id === name)?.eq\n      }\n      const fileReader = new FileReader();\n      fileReader.onload = function(fileLoadedEvent){\n        const textFromFileLoaded = fileLoadedEvent.target!.result;\n        const st = dotparse(textFromFileLoaded as string)\n          console.log(st)\n        const nodes = st[0].children\n            .filter((s) => s.type === 'node_stmt')\n            .map((n: NodeStatement | EdgeStatement, i) => n as NodeStatement)\n            .map((n: NodeStatement, i) => ({\n          id: i + 1,\n          label: n.node_id.id,\n          color: getAttribute('color', n.attr_list),\n          shape: getAttribute('shape', n.attr_list),\n        }))\n        const nodesByLabel = Object.fromEntries(nodes.map((n) => [n.label, n]))\n        const edges = st[0].children\n            .filter((s) => s.type === 'edge_stmt')\n            .map((n: NodeStatement | EdgeStatement, i) => n as EdgeStatement)\n            .map((n: EdgeStatement, i) => ({\n          id: i + 1,\n          from: nodesByLabel[n.edge_list[0].id].id,\n          to: nodesByLabel[n.edge_list[1].id].id,\n          color: getAttribute('color', n.attr_list),\n        }))\n        const graph = {\n          nodes,\n          edges,\n        }\n        dispatch(setGraph(graph))\n      };\n\n      fileReader.readAsText(fileToLoad, \"UTF-8\");\n    }\n  }\n\n  const downloadAsDOT = () => {\n    const nodes = Object.fromEntries(graph.nodes.map((node: Node) => [node.id, node]))\n    let text = 'digraph {\\n'\n    text += graph.nodes.map((n: Node) => `  \"${n.label}\"[shape=${n.shape}][color=${n.color}]`).join('\\n') + '\\n'\n    text += graph.edges.map((e: Edge) => `  \"${nodes[e.from].label}\"->\"${nodes[e.to].label}\"[color=${e.color}]`).join('\\n') + '\\n'\n    text += '}'\n    const filename = 'graph.dot'\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  const downloadAsPNG = () => {\n    const dt = visJsRef?.current?.getElementsByTagName('canvas')[0]\n    if (!dt) return\n    const href = dt.toDataURL().replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\n    const filename = 'graph.png'\n    const element = document.createElement('a');\n    element.setAttribute('href', href)\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  return <>\n    <div style={{position: 'absolute', top: 0, right: 0, background: 'white', zIndex: 1}}>\n      <Button onClick={uploadDOT}>Upload DOT</Button>\n      <Button onClick={downloadAsDOT}>Download as DOT</Button>\n      <Button onClick={downloadAsPNG}>Download as PNG</Button>\n    </div>\n    <div ref={visJsRef} style={{width: '100%', height: '100vh'}} />\n  </>\n}\n\nexport default Outline\n","import React from 'react';\nimport Editor from './Editor'\nimport Outline from './Outline'\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{\n      display: 'flex',\n    }}>\n      <div style={{flex: 1}}>\n        <Editor />\n      </div>\n      <div style={{flex: 1}}>\n        <Outline />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from \"redux\";\nimport graph from './graphSlice'\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    graph,\n  }),\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport { store } from './store'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}