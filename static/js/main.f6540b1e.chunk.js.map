{"version":3,"sources":["ColorPickerView.tsx","graphSlice.ts","NodeView.tsx","NodesView.tsx","EdgeView.tsx","EdgesView.tsx","Editor.tsx","Outline.tsx","App.tsx","store.ts","index.tsx"],"names":["ColorOption","colorDispatchable","color","props","dispatch","useDispatch","Button","style","width","minWidth","height","borderWidth","borderColor","colorable","borderStyle","margin","background","onClick","dispatchable","ColorPickerView","colors","display","marginLeft","map","c","newId","nodes","Math","max","n","id","graphSlice","createSlice","name","initialState","label","shape","edges","from","to","reducers","addNode","reducer","state","action","push","payload","prepare","data","nanoid","addEdge","setNodeColor","node","find","setNodeShape","setEdgeColor","edge","actions","ShapeOption","star","box","ellipsis","triangle","shapes","ShapePicker","NodeView","listStyleType","NodesView","graph","useSelector","useState","searchCriteria","setSearchCriteria","newNodeLabel","setNewNodeLabel","Typography","variant","component","gutterBottom","TextField","fullWidth","inputProps","InputProps","endAdornment","InputAdornment","position","IconButton","onBlur","evt","target","value","onChange","onKeyPress","key","blur","padding","EdgeView","EdgesView","nodesById","Object","fromEntries","newEdgeFrom","setNewEdgeFrom","newEdgeTo","setNewEdgeTo","useEffect","Autocomplete","options","getOptionLabel","option","_","blurOnSelect","renderInput","params","Editor","setValue","overflow","AppBar","Tabs","e","newValue","Tab","hidden","Outline","version","setVersion","currentGraph","setCurrentGraph","previousGraph","setPreviousGraph","network","setNetwork","j","JSON","stringify","parse","parseInt","toString","body","update","visJsRef","useRef","current","Network","physics","enabled","arrows","top","right","zIndex","text","join","element","document","createElement","setAttribute","encodeURIComponent","appendChild","click","removeChild","dt","getElementsByTagName","href","toDataURL","replace","ref","App","className","flex","store","configureStore","combineReducers","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f6540b1e.chunk.js","sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\n\nimport type { Color } from './graphSlice'\n\nexport interface Colorable {\n  color: Color\n}\nexport interface ColorDispatchable {\n  colorable: Colorable\n  dispatchable: (color: Color) => void\n}\n\nfunction ColorOption({colorDispatchable, color, ...props}: {color: Color, colorDispatchable: ColorDispatchable}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    borderWidth: 4,\n    borderColor: colorDispatchable.colorable.color === color ? 'red' : 'black',\n    borderStyle: 'solid',\n    margin: 8,\n    background: color,\n    ...props\n  }} onClick={() => {\n    dispatch(colorDispatchable.dispatchable(color))\n  }}></Button>\n}\n\nfunction ColorPickerView({\n    colorDispatchable,\n    colors,\n}: {\n    colorDispatchable: ColorDispatchable,\n    colors: Color[]\n}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {colors.map((c) => (\n        <ColorOption key={c} colorDispatchable={colorDispatchable} color={c} />\n      ))}\n    </div>\n  )\n}\n\nexport default ColorPickerView\n","import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from 'nanoid'\n\nexport type Color = 'white' | 'red' | 'blue' | 'yellow' | 'black'\nexport type Shape = 'star' | 'box' | 'ellipsis' | 'triangle'\n\ninterface WithId {\n  id: number\n}\n\nexport interface Node extends WithId {\n  label: string\n  color: Color\n  shape: Shape\n}\n\nexport interface Edge extends WithId {\n  from: number\n  to: number\n  color: Color\n}\n\ninterface GraphState {\n  nodes: Node[]\n  edges: Edge[]\n}\n\nconst newId = (nodes: WithId[]) => {\n  return Math.max(...nodes.map((n) => n.id)) + 1\n}\n\nconst initialState: GraphState = {\n  nodes: [\n    { id: 1, label: 'Node 1', color: 'red', shape: 'box' },\n    { id: 2, label: 'Node 2', color: 'white', shape: 'box' },\n    { id: 3, label: 'Node 3', color: 'white', shape: 'box' },\n    { id: 4, label: 'Node 4', color: 'white', shape: 'box' },\n    { id: 5, label: 'Node 5', color: 'white', shape: 'box' },\n  ],\n  edges: [\n    { id: 1, from: 1, to: 2, color: 'black' },\n    { id: 2, from: 1, to: 3, color: 'black' },\n    { id: 3, from: 2, to: 4, color: 'black' },\n    { id: 4, from: 2, to: 5, color: 'black' }\n  ],\n}\n\nconst graphSlice = createSlice({\n  name: 'graph',\n  initialState,\n  reducers: {\n    addNode: {\n      reducer(state, action) {\n        state.nodes.push({\n          id: newId(state.nodes),\n          label: action.payload.label,\n          shape: 'box',\n          color: 'white',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    addEdge: {\n      reducer(state, action) {\n        state.edges.push({\n          id: newId(state.nodes),\n          from: action.payload.from.id,\n          to: action.payload.to.id,\n          color: 'black',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeColor: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeShape: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.shape = action.payload.shape\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setEdgeColor: {\n      reducer(state, action) {\n        const edge = state.edges.find((n) => n.id === action.payload.edge.id)\n        if (!edge) {\n          return\n        }\n        edge.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n  },\n})\n\nexport const { addNode, addEdge, setNodeColor, setNodeShape, setEdgeColor } = graphSlice.actions\nexport default graphSlice.reducer\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\n\nimport StarIcon from '@material-ui/icons/StarBorder';\nimport BoxIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CircleIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport TriangleIcon from '@material-ui/icons/ChangeHistory';\n\nimport ColorPickerView from './ColorPickerView'\nimport { Color, setNodeColor, setNodeShape } from './graphSlice'\nimport type { Node, Shape } from './graphSlice'\n\nfunction ShapeOption({node, shape, ...props}: {node: Node, shape: Shape}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    margin: 8,\n    color: shape === node.shape ? 'blue' : 'black',\n    ...props\n  }} onClick={() => {\n    dispatch(setNodeShape({ node, shape }))\n  }}>{{\n    star: <StarIcon />,\n    box: <BoxIcon />,\n    ellipsis: <CircleIcon />,\n    triangle: <TriangleIcon />,\n  }[shape]}</Button>\n}\n\nconst shapes: Shape[] = ['star', 'box', 'ellipsis', 'triangle']\nfunction ShapePicker({node}: {node: Node}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {shapes.map((c) => (\n        <ShapeOption key={c} node={node} shape={c} />\n      ))}\n    </div>\n  )\n}\n\nfunction NodeView({node}: {node: Node}) {\n  return (\n    <li style={{listStyleType: 'none', margin: 0}}>\n      {node.label}\n      <ColorPickerView\n        colorDispatchable={{\n          colorable: node,\n          dispatchable: (color: Color) => setNodeColor({node, color}),\n        }}\n        colors={['white', 'red', 'blue', 'yellow']}\n        />\n      <ShapePicker node={node} />\n    </li>\n  )\n}\n\nexport default NodeView\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport NodeView from './NodeView'\nimport { addNode, Node } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction NodesView() {\n  const dispatch = useDispatch()\n  const graph = useSelector((state: RootState) => state.graph)\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newNodeLabel, setNewNodeLabel] = useState('')\n  const newNode = (evt: React.FocusEvent<HTMLInputElement>) => {\n    const label = evt.target.value;\n    if (label) {\n      dispatch(addNode({ label, color: 'white' }))\n      setNewNodeLabel('')\n    }\n  }\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Nodos\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar' }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"Agregar nodo...\"\n        onBlur={newNode}\n        value={newNodeLabel}\n        onChange={(evt) => setNewNodeLabel(evt.target.value)}\n        onKeyPress={(evt) => evt.key === 'Enter' && (evt.target as HTMLInputElement).blur()}\n        />\n      <ul style={{padding: 0}}>\n        {graph.nodes.map((node: Node) => (\n          <NodeView key={node.id}\n            node={node}\n            />\n        ))}\n      </ul>\n    </div>\n  )\n}\nexport default NodesView\n","import React from 'react'\n\nimport { Node, Edge, Color, setEdgeColor } from './graphSlice'\nimport ColorPickerView from './ColorPickerView'\n\nfunction EdgeView({edge, from, to}: {edge: Edge, from: Node, to: Node}) {\n  return (\n    <li style={{listStyleType: 'none', margin: 0}}>\n      {from.label} - {to.label}\n      <ColorPickerView\n        colorDispatchable={{\n          colorable: edge,\n          dispatchable: (color: Color) => setEdgeColor({edge, color}),\n        }}\n        colors={['black', 'red', 'blue', 'yellow']}\n        />\n    </li>\n  )\n}\n\nexport default EdgeView\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport EdgeView from './EdgeView'\nimport { Node, Edge, addEdge } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction EdgesView() {\n  const dispatch = useDispatch()\n  const edges = useSelector((state: RootState) => state.graph.edges)\n  const nodes = useSelector((state: RootState) => state.graph.nodes)\n  const nodesById = Object.fromEntries(nodes.map((node: Node) => [node.id, node]))\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newEdgeFrom, setNewEdgeFrom] = useState<Node | null>(null)\n  const [newEdgeTo, setNewEdgeTo] = useState<Node | null>(null)\n  useEffect(() => {\n    if (!newEdgeFrom || !newEdgeTo) return\n    dispatch(addEdge({'from': newEdgeFrom, to: newEdgeTo}))\n    setNewEdgeFrom(null)\n    setNewEdgeTo(null)\n  }, [setNewEdgeFrom, setNewEdgeTo, newEdgeFrom, newEdgeTo, dispatch])\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Conectores\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar' }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        onChange={(_, value) => setNewEdgeFrom(value)}\n        value={newEdgeFrom}\n        blurOnSelect\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector desde...\"\n            />\n          )}\n        />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        blurOnSelect\n        onChange={(_, value) => setNewEdgeTo(value)}\n        value={newEdgeTo}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector hacia...\"\n            />\n          )}\n        />\n      <ul style={{padding: 0}}>\n        {edges.map((edge: Edge) => (\n          <EdgeView key={edge.id} edge={edge} from={nodesById[edge.from]} to={nodesById[edge.to]} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default EdgesView\n","import React, { useState } from 'react'\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport NodesView from './NodesView';\nimport EdgesView from './EdgesView';\n\nfunction Editor() {\n  const [value, setValue] = useState(0)\n  return (\n    <div style={{height: '100vh', overflow: 'auto'}}>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={(e: any, newValue: number) => setValue(newValue)}>\n          <Tab label=\"Nodos\" />\n          <Tab label=\"Conectores\" />\n          <Tab label=\"Texto libre\" />\n        </Tabs>\n      </AppBar>\n      <div style={{padding: 20}}>\n        <div hidden={value !== 0}>\n          <NodesView />\n        </div>\n        <div hidden={value !== 1}>\n          <EdgesView />\n        </div>\n        <div hidden={value !== 2}>\n          Item Three\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Editor\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Network } from 'vis-network'\nimport Button from '@material-ui/core/Button';\n\nimport type { Node, Edge } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction Outline() {\n  const graph = useSelector((state: RootState) => state.graph)\n  const [version, setVersion] = useState('0')\n  const [currentGraph, setCurrentGraph] = useState<null | typeof graph>(null)\n  const [previousGraph, setPreviousGraph] = useState('')\n  const [network, setNetwork] = useState<Network | null>(null)\n  useEffect(() => {\n    const j = JSON.stringify(graph)\n    if (j !== previousGraph) {\n      setPreviousGraph(j)\n      setCurrentGraph(JSON.parse(j))\n      setVersion((parseInt(version) + 1).toString())\n    }\n    if (network) {\n      (network as any).body.data.nodes.update(graph.nodes);\n      (network as any).body.data.edges.update(graph.edges);\n    }\n  }, [setPreviousGraph, graph, previousGraph, version, network])\n\n  const visJsRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!network) {\n      setNetwork(visJsRef.current && currentGraph &&\n        new Network(visJsRef.current, currentGraph, {\n          physics: {enabled: false},\n          edges: {\n            arrows: {\n              to: {\n                enabled: true,\n              }\n            }\n          },\n        }))\n    }\n  }, [visJsRef, currentGraph, network]);\n\n  const downloadAsDOT = () => {\n    const nodes = Object.fromEntries(graph.nodes.map((node: Node) => [node.id, node]))\n    let text = 'digraph {\\n'\n    text += graph.nodes.map((n: Node) => `  \"${n.label}\"[shape=${n.shape}][color=${n.color}]`).join('\\n') + '\\n'\n    text += graph.edges.map((e: Edge) => `  \"${nodes[e.from].label}\"->\"${nodes[e.to].label}\"[color=${e.color}]`).join('\\n') + '\\n'\n    text += '}'\n    const filename = 'graph.dot'\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  const downloadAsPNG = () => {\n    const dt = visJsRef?.current?.getElementsByTagName('canvas')[0]\n    if (!dt) return\n    const href = dt.toDataURL().replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\n    const filename = 'graph.png'\n    const element = document.createElement('a');\n    element.setAttribute('href', href)\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  return <>\n    <div style={{position: 'absolute', top: 0, right: 0, background: 'white', zIndex: 1}}>\n      <Button onClick={downloadAsDOT}>Download as DOT</Button>\n      <Button onClick={downloadAsPNG}>Download as PNG</Button>\n    </div>\n    <div ref={visJsRef} style={{width: '100%', height: '100vh'}} />\n  </>\n}\n\nexport default Outline\n","import React from 'react';\nimport Editor from './Editor'\nimport Outline from './Outline'\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{\n      display: 'flex',\n    }}>\n      <div style={{flex: 1}}>\n        <Editor />\n      </div>\n      <div style={{flex: 1}}>\n        <Outline />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from \"redux\";\nimport graph from './graphSlice'\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    graph,\n  }),\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport { store } from './store'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}