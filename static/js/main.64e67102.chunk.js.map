{"version":3,"sources":["ColorPickerView.tsx","graphSlice.ts","NodeView.tsx","NodesView.tsx","EdgeView.tsx","EdgesView.tsx","NoteTakerView.tsx","Editor.tsx","Outline.tsx","App.tsx","store.ts","index.tsx"],"names":["ColorOption","colorDispatchable","color","props","dispatch","useDispatch","Button","style","width","minWidth","height","borderWidth","borderColor","colorable","borderStyle","margin","background","onClick","dispatchable","ColorPickerView","colors","display","marginLeft","map","c","newId","nodes","Math","max","n","id","concat","graphSlice","createSlice","name","initialState","label","shape","edges","from","to","text","reducers","addNode","reducer","state","action","push","payload","prepare","data","nanoid","addEdge","setNodeColor","node","find","setNodeShape","setEdgeColor","edge","deleteNode","filter","e","setGraph","updateText","actions","ShapeOption","star","box","ellipsis","triangle","shapes","ShapePicker","NodeView","listStyleType","padding","NodesView","graph","useSelector","useState","searchCriteria","setSearchCriteria","newNodeLabel","setNewNodeLabel","Typography","variant","component","gutterBottom","TextField","fullWidth","inputProps","InputProps","endAdornment","InputAdornment","position","IconButton","onBlur","evt","target","value","onChange","onKeyPress","key","blur","EdgeView","EdgesView","nodesById","Object","fromEntries","newEdgeFrom","setNewEdgeFrom","newEdgeTo","setNewEdgeTo","useEffect","Autocomplete","options","getOptionLabel","option","_","blurOnSelect","renderInput","params","NoteTakerView","markdown","ref","useRef","current","focus","multiline","minHeight","inputRef","Editor","tab","overflow","hidden","Outline","version","setVersion","currentGraph","setCurrentGraph","previousGraph","setPreviousGraph","network","setNetwork","j","JSON","stringify","parse","parseInt","toString","console","log","nodeIds","removedNodes","indexOf","body","remove","update","edgeIds","removedEdges","stabilize","visJsRef","Network","physics","enabled","arrows","top","right","zIndex","element","document","createElement","setAttribute","appendChild","click","removeChild","onchange","fileToLoad","files","getAttribute","attrs","a","eq","fileReader","FileReader","onload","fileLoadedEvent","textFromFileLoaded","result","st","dotparse","children","s","type","i","node_id","attr_list","nodesByLabel","edge_list","readAsText","join","encodeURIComponent","dt","getElementsByTagName","href","toDataURL","replace","App","setTab","AppBar","Tabs","newTab","Tab","className","flex","store","configureStore","combineReducers","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.64e67102.chunk.js","sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\n\nimport type { Color } from './graphSlice'\n\nexport interface Colorable {\n  color: Color\n}\nexport interface ColorDispatchable {\n  colorable: Colorable\n  dispatchable: (color: Color) => void\n}\n\nfunction ColorOption({colorDispatchable, color, ...props}: {color: Color, colorDispatchable: ColorDispatchable}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    borderWidth: 4,\n    borderColor: colorDispatchable.colorable.color === color ? 'red' : 'black',\n    borderStyle: 'solid',\n    margin: 8,\n    background: color,\n    ...props\n  }} onClick={() => {\n    dispatch(colorDispatchable.dispatchable(color))\n  }}></Button>\n}\n\nfunction ColorPickerView({\n    colorDispatchable,\n    colors,\n}: {\n    colorDispatchable: ColorDispatchable,\n    colors: Color[]\n}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {colors.map((c) => (\n        <ColorOption key={c} colorDispatchable={colorDispatchable} color={c} />\n      ))}\n    </div>\n  )\n}\n\nexport default ColorPickerView\n","import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from 'nanoid'\n\nexport type Color = 'white' | 'red' | 'blue' | 'yellow' | 'black'\nexport type Shape = 'star' | 'box' | 'ellipsis' | 'triangle'\n\ninterface WithId {\n  id: number\n}\n\nexport interface Node extends WithId {\n  label: string\n  color: Color\n  shape: Shape\n}\n\nexport interface Edge extends WithId {\n  from: number\n  to: number\n  color: Color\n}\n\ninterface GraphState {\n  nodes: Node[]\n  edges: Edge[]\n  text: string\n}\n\nconst newId = (nodes: WithId[]) => {\n  return Math.max(...nodes.map((n) => n.id).concat([0]) || 0) + 1\n}\n\nconst initialState: GraphState = {\n  nodes: [\n    { id: 1, label: 'Node 1', color: 'red', shape: 'box' },\n    { id: 2, label: 'Node 2', color: 'white', shape: 'box' },\n    { id: 3, label: 'Node 3', color: 'white', shape: 'box' },\n    { id: 4, label: 'Node 4', color: 'white', shape: 'box' },\n    { id: 5, label: 'Node 5', color: 'white', shape: 'box' },\n  ],\n  edges: [\n    { id: 1, from: 1, to: 2, color: 'black' },\n    { id: 2, from: 1, to: 3, color: 'black' },\n    { id: 3, from: 2, to: 4, color: 'black' },\n    { id: 4, from: 2, to: 5, color: 'black' }\n  ],\n  text: '# Hello world\\n',\n}\n\nconst graphSlice = createSlice({\n  name: 'graph',\n  initialState,\n  reducers: {\n    addNode: {\n      reducer(state, action) {\n        state.nodes.push({\n          id: newId(state.nodes),\n          label: action.payload.label,\n          shape: 'box',\n          color: 'white',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    addEdge: {\n      reducer(state, action) {\n        state.edges.push({\n          id: newId(state.edges),\n          from: action.payload.from.id,\n          to: action.payload.to.id,\n          color: 'black',\n        })\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeColor: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setNodeShape: {\n      reducer(state, action) {\n        const node = state.nodes.find((n) => n.id === action.payload.node.id)\n        if (!node) {\n          return\n        }\n        node.shape = action.payload.shape\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setEdgeColor: {\n      reducer(state, action) {\n        const edge = state.edges.find((n) => n.id === action.payload.edge.id)\n        if (!edge) {\n          return\n        }\n        edge.color = action.payload.color\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    deleteNode: {\n      reducer(state, action) {\n        state.nodes = state.nodes.filter((n) => n.id !== action.payload.id)\n        state.edges = state.edges.filter((e) => e.from !== action.payload.id && e.to !== action.payload.id)\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    setGraph: {\n      reducer(state, action) {\n        state.nodes = action.payload.nodes\n        state.edges = action.payload.edges\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n    updateText: {\n      reducer(state, action) {\n        state.text = action.payload\n      },\n      prepare(data: any) { return { id: nanoid(), payload: data } as any },\n    },\n  },\n})\n\nexport const {\n  addNode,\n  addEdge,\n  setNodeColor,\n  setNodeShape,\n  setEdgeColor,\n  deleteNode,\n  setGraph,\n  updateText,\n} = graphSlice.actions\n\nexport default graphSlice.reducer\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport StarIcon from '@material-ui/icons/StarBorder';\nimport BoxIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CircleIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport TriangleIcon from '@material-ui/icons/ChangeHistory';\n\nimport ColorPickerView from './ColorPickerView'\nimport { Color, setNodeColor, setNodeShape, deleteNode } from './graphSlice'\nimport type { Node, Shape } from './graphSlice'\n\nfunction ShapeOption({node, shape, ...props}: {node: Node, shape: Shape}) {\n  const dispatch = useDispatch()\n  return <Button style={{\n    width: 30,\n    minWidth: 30,\n    height: 30,\n    margin: 8,\n    color: shape === node.shape ? 'blue' : 'black',\n    ...props\n  }} onClick={() => {\n    dispatch(setNodeShape({ node, shape }))\n  }}>{{\n    star: <StarIcon />,\n    box: <BoxIcon />,\n    ellipsis: <CircleIcon />,\n    triangle: <TriangleIcon />,\n  }[shape]}</Button>\n}\n\nconst shapes: Shape[] = ['star', 'box', 'ellipsis', 'triangle']\nfunction ShapePicker({node}: {node: Node}) {\n  return (\n    <div style={{display: 'flex', marginLeft: -8}}>\n      {shapes.map((c) => (\n        <ShapeOption key={c} node={node} shape={c} />\n      ))}\n    </div>\n  )\n}\n\nfunction NodeView({node}: {node: Node}) {\n  const dispatch = useDispatch()\n  const del = () => dispatch(deleteNode(node))\n  return (\n    <li style={{listStyleType: 'none', margin: 0}}>\n      {node.label}\n      <div style={{display: 'flex'}}>\n        <div>\n          <ColorPickerView\n            colorDispatchable={{\n              colorable: node,\n              dispatchable: (color: Color) => setNodeColor({node, color}),\n            }}\n            colors={['white', 'red', 'blue', 'yellow']}\n            />\n          <ShapePicker node={node} />\n        </div>\n        <div>\n          <Button style={{padding: 22, minWidth: 0, width: 24, height: 24}} onClick={del}>\n            <DeleteIcon />\n          </Button>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default NodeView\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport NodeView from './NodeView'\nimport { addNode, Node } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction NodesView() {\n  const dispatch = useDispatch()\n  const graph = useSelector((state: RootState) => state.graph)\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newNodeLabel, setNewNodeLabel] = useState('')\n  const newNode = (evt: React.FocusEvent<HTMLInputElement>) => {\n    const label = evt.target.value;\n    if (label) {\n      dispatch(addNode({ label, color: 'white' }))\n      setNewNodeLabel('')\n    }\n  }\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Nodos\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar' }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        fullWidth\n        label=\"Agregar nodo...\"\n        onBlur={newNode}\n        value={newNodeLabel}\n        onChange={(evt) => setNewNodeLabel(evt.target.value)}\n        onKeyPress={(evt) => evt.key === 'Enter' && (evt.target as HTMLInputElement).blur()}\n        />\n      <ul style={{padding: 0}}>\n        {graph.nodes.map((node: Node) => (\n          <NodeView key={node.id}\n            node={node}\n            />\n        ))}\n      </ul>\n    </div>\n  )\n}\nexport default NodesView\n","import React from 'react'\n\nimport { Node, Edge, Color, setEdgeColor } from './graphSlice'\nimport ColorPickerView from './ColorPickerView'\n\nfunction EdgeView({edge, from, to}: {edge: Edge, from: Node, to: Node}) {\n  return (\n    <li style={{listStyleType: 'none', margin: 0}}>\n      {from.label} - {to.label}\n      <ColorPickerView\n        colorDispatchable={{\n          colorable: edge,\n          dispatchable: (color: Color) => setEdgeColor({edge, color}),\n        }}\n        colors={['black', 'red', 'blue', 'yellow']}\n        />\n    </li>\n  )\n}\n\nexport default EdgeView\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport EdgeView from './EdgeView'\nimport { Node, Edge, addEdge } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction EdgesView() {\n  const dispatch = useDispatch()\n  const edges = useSelector((state: RootState) => state.graph.edges)\n  const nodes = useSelector((state: RootState) => state.graph.nodes)\n  const nodesById = Object.fromEntries(nodes.map((node: Node) => [node.id, node]))\n  const [searchCriteria, setSearchCriteria] = useState('')\n  const [newEdgeFrom, setNewEdgeFrom] = useState<Node | null>(null)\n  const [newEdgeTo, setNewEdgeTo] = useState<Node | null>(null)\n  useEffect(() => {\n    if (!newEdgeFrom || !newEdgeTo) return\n    dispatch(addEdge({'from': newEdgeFrom, to: newEdgeTo}))\n    setNewEdgeFrom(null)\n    setNewEdgeTo(null)\n  }, [setNewEdgeFrom, setNewEdgeTo, newEdgeFrom, newEdgeTo, dispatch])\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Conectores\n      </Typography>\n      <TextField\n        fullWidth\n        label=\"Buscar\"\n        inputProps={{ 'aria-label': 'Buscar' }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n            {searchCriteria &&\n              <IconButton\n                onClick={() => setSearchCriteria('')}\n                >\n                <ClearIcon />\n              </IconButton>\n            }\n            {!searchCriteria &&\n              <IconButton\n                onClick={() => {}}\n                >\n                  <SearchIcon />\n                </IconButton>\n              }\n            </InputAdornment>\n          ),\n        }}\n      />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        onChange={(_, value) => setNewEdgeFrom(value)}\n        value={newEdgeFrom}\n        blurOnSelect\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector desde...\"\n            />\n          )}\n        />\n      <Autocomplete\n        options={nodes}\n        getOptionLabel={(option) => option.label}\n        blurOnSelect\n        onChange={(_, value) => setNewEdgeTo(value)}\n        value={newEdgeTo}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            fullWidth\n            label=\"Agregar conector hacia...\"\n            />\n          )}\n        />\n      <ul style={{padding: 0}}>\n        {edges.map((edge: Edge) => (\n          <EdgeView key={edge.id} edge={edge} from={nodesById[edge.from]} to={nodesById[edge.to]} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default EdgesView\n","import React, { useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@material-ui/core/TextField';\n\nimport { updateText } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction NoteTakerView() {\n  const markdown = useSelector((state: RootState) => state.graph.text)\n  const dispatch = useDispatch()\n  const ref = useRef<HTMLTextAreaElement>()\n  useEffect(() => {\n    ref?.current?.focus()\n  })\n  return (\n    <div>\n      <TextField\n        multiline\n        fullWidth\n        inputProps={{style: {minHeight: 400}}}\n        inputRef={ref}\n        value={markdown}\n        onChange={(e) => dispatch(updateText(e.target.value))}\n        />\n    </div>\n  )\n}\n\nexport default NoteTakerView\n","import React from 'react'\nimport NodesView from './NodesView';\nimport EdgesView from './EdgesView';\nimport NoteTakerView from './NoteTakerView'\n\nfunction Editor({tab}: {tab: number}) {\n  return (\n    <div style={{height: '100vh', overflow: 'auto'}}>\n      <div style={{padding: 20}}>\n        <div hidden={tab !== 0}>\n          <NodesView />\n        </div>\n        <div hidden={tab !== 1}>\n          <EdgesView />\n        </div>\n        <div hidden={tab !== 2}>\n          <NoteTakerView />\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Editor\n","import React, { useState, useEffect, useRef } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Network } from 'vis-network'\nimport Button from '@material-ui/core/Button';\nimport dotparse, { NodeStatement, EdgeStatement } from 'dotparser'\n\nimport { Node, Edge, setGraph } from './graphSlice'\nimport type { RootState } from './store'\n\nfunction Outline({tab}: {tab: number}) {\n  const graph = useSelector((state: RootState) => state.graph)\n  const [version, setVersion] = useState('0')\n  const [currentGraph, setCurrentGraph] = useState<null | typeof graph>(null)\n  const [previousGraph, setPreviousGraph] = useState('')\n  const [network, setNetwork] = useState<Network | null>(null)\n  const dispatch = useDispatch()\n  const markdown = useSelector((state: RootState) => state.graph.text)\n  useEffect(() => {\n    const j = JSON.stringify(graph)\n    if (j !== previousGraph) {\n      setPreviousGraph(j)\n      setCurrentGraph(JSON.parse(j))\n      setVersion((parseInt(version) + 1).toString())\n    }\n    console.log(graph)\n    if (network) {\n      const n = network as any\n      const nodes = graph.nodes\n      const nodeIds = graph.nodes.map((n) => n.id)\n      const removedNodes = JSON.parse(previousGraph).nodes.filter((n: Node) => nodeIds.indexOf(n.id) === -1)\n      n.body.data.nodes.remove(removedNodes)\n      n.body.data.nodes.update(nodes);\n\n      const edgeIds = graph.edges.map((n) => n.id)\n      const removedEdges = JSON.parse(previousGraph).edges.filter((n: Node) => edgeIds.indexOf(n.id) === -1)\n      n.body.data.edges.remove(removedEdges)\n      n.body.data.edges.update(graph.edges);\n      n.stabilize(1000)\n    }\n  }, [setPreviousGraph, graph, previousGraph, version, network])\n\n  const visJsRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!network) {\n      setNetwork(visJsRef.current && currentGraph &&\n        new Network(visJsRef.current, currentGraph, {\n          physics: {enabled: false},\n          edges: {\n            arrows: {\n              to: {\n                enabled: true,\n              }\n            }\n          },\n        }))\n    }\n  }, [visJsRef, currentGraph, network]);\n\n  const uploadDOT = () => {\n    const element = document.createElement('input');\n    element.setAttribute('type', 'file');\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n\n    element.onchange = () => {\n      const fileToLoad = element.files![0];\n\n      const getAttribute = (name: string, attrs: {id: string, eq: string}[]) => {\n        return attrs.find((a) => a.id === name)?.eq\n      }\n      const fileReader = new FileReader();\n      fileReader.onload = function(fileLoadedEvent){\n        const textFromFileLoaded = fileLoadedEvent.target!.result;\n        const st = dotparse(textFromFileLoaded as string)\n          console.log(st)\n        const nodes = st[0].children\n            .filter((s) => s.type === 'node_stmt')\n            .map((n: NodeStatement | EdgeStatement, i) => n as NodeStatement)\n            .map((n: NodeStatement, i) => ({\n          id: i + 1,\n          label: n.node_id.id,\n          color: getAttribute('color', n.attr_list),\n          shape: getAttribute('shape', n.attr_list),\n        }))\n        const nodesByLabel = Object.fromEntries(nodes.map((n) => [n.label, n]))\n        const edges = st[0].children\n            .filter((s) => s.type === 'edge_stmt')\n            .map((n: NodeStatement | EdgeStatement, i) => n as EdgeStatement)\n            .map((n: EdgeStatement, i) => ({\n          id: i + 1,\n          from: nodesByLabel[n.edge_list[0].id].id,\n          to: nodesByLabel[n.edge_list[1].id].id,\n          color: getAttribute('color', n.attr_list),\n        }))\n        const graph = {\n          nodes,\n          edges,\n        }\n        dispatch(setGraph(graph))\n      };\n\n      fileReader.readAsText(fileToLoad, \"UTF-8\");\n    }\n  }\n\n  const downloadAsDOT = () => {\n    const nodes = Object.fromEntries(graph.nodes.map((node: Node) => [node.id, node]))\n    let text = 'digraph {\\n'\n    text += graph.nodes.map((n: Node) => `  \"${n.label}\"[shape=${n.shape}][color=${n.color}]`).join('\\n') + '\\n'\n    text += graph.edges.map((e: Edge) => `  \"${nodes[e.from].label}\"->\"${nodes[e.to].label}\"[color=${e.color}]`).join('\\n') + '\\n'\n    text += '}'\n    const filename = 'graph.dot'\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  const downloadAsPNG = () => {\n    const dt = visJsRef?.current?.getElementsByTagName('canvas')[0]\n    if (!dt) return\n    const href = dt.toDataURL().replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\n    const filename = 'graph.png'\n    const element = document.createElement('a');\n    element.setAttribute('href', href)\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  return <>\n    <div style={{position: 'absolute', top: 0, right: 0, background: 'white', zIndex: 1}}>\n      <Button onClick={uploadDOT}>Upload DOT</Button>\n      <Button onClick={downloadAsDOT}>Download as DOT</Button>\n      <Button onClick={downloadAsPNG}>Download as PNG</Button>\n    </div>\n    <div ref={visJsRef} style={{width: '100%', height: '100vh', display: (tab === 1 || tab === 0) ? 'block' : 'none'}} />\n    <ReactMarkdown children={markdown} />\n  </>\n}\n\nexport default Outline\n","import React, { useState } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport Editor from './Editor'\nimport Outline from './Outline'\n\nfunction App() {\n  const [tab, setTab] = useState(0)\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Tabs value={tab} onChange={(e: any, newTab: number) => setTab(newTab)}>\n          <Tab label=\"Nodos\" />\n          <Tab label=\"Conectores\" />\n          <Tab label=\"Texto libre\" />\n        </Tabs>\n      </AppBar>\n      <div className=\"App\" style={{\n        display: 'flex',\n      }}>\n        <div style={{flex: 1}}>\n          <Editor tab={tab} />\n        </div>\n        <div style={{flex: 1}}>\n          <Outline tab={tab} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from \"redux\";\nimport graph from './graphSlice'\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    graph,\n  }),\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport { store } from './store'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}